{"version":3,"file":"index.min.js","sources":["../../src/lib/database.ts","../../src/lib/array.ts","../../src/lib/message.ts","../../../../../node_modules/sm-crypto/node_modules/jsbn/index.js","../../../../../node_modules/sm-crypto/src/sm2/asn1.js","../../../../../node_modules/sm-crypto/src/sm2/ec.js","../../../../../node_modules/sm-crypto/src/sm2/utils.js","../../../../../node_modules/sm-crypto/src/sm2/sm3.js","../../../../../node_modules/sm-crypto/src/sm2/index.js","../../../../../node_modules/sm-crypto/src/sm3/index.js","../../../../../node_modules/sm-crypto/src/sm4/index.js","../../../../../node_modules/sm-crypto/src/index.js","../../src/lib/crypto.ts","../../src/lib/index.ts"],"sourcesContent":["import { default as localforage } from 'localforage';\r\n\r\n/**\r\n * 这里使用单例模式，主要是因为将静态类，赋值给Vue.prototype会出现 Property '' is a static member of type '' 错误。\r\n * 参考以下文章\r\n * {@see https://techformist.com/static-variables-methods-typescript/}\r\n * {@see https://www.xspdf.com/resolution/54250655.html}\r\n * {@see https://www.typescriptlang.org/docs/handbook/classes.html#static-properties}\r\n *\r\n * 单例模式饿汉式与懒汉式\r\n * {@see https://zhuanlan.zhihu.com/p/129264092}\r\n */\r\nclass LocalForage {\r\n    private static instance = new LocalForage();\r\n\r\n    private constructor() {}\r\n\r\n    public static getInstance(): LocalForage {\r\n        return this.instance;\r\n    }\r\n\r\n    /**\r\n     * 参考https://github.com/localForage/localForage/blob/master/typings/localforage.d.ts\r\n     *\r\n     * @param key\r\n     */\r\n    public getItem<T>(key: string): Promise<T | null> {\r\n        return localforage.getItem<T>(key);\r\n    }\r\n\r\n    public setItem<T>(key: string, value: T): Promise<T> {\r\n        return localforage.setItem<T>(key, value);\r\n    }\r\n\r\n    public removeItem(key: string): Promise<void> {\r\n        return localforage.removeItem(key);\r\n    }\r\n\r\n    public clear(): Promise<void> {\r\n        return localforage.clear();\r\n    }\r\n\r\n    public length(): Promise<number> {\r\n        return localforage.length();\r\n    }\r\n\r\n    public key(keyIndex: number): Promise<string> {\r\n        return localforage.key(keyIndex);\r\n    }\r\n\r\n    public keys(): Promise<string[]> {\r\n        return localforage.keys();\r\n    }\r\n    public iterate<T, U>(iteratee: (value: T, key: string, iterationNumber: number) => U): Promise<U> {\r\n        return localforage.iterate<T, U>(iteratee);\r\n    }\r\n\r\n    public setDriver(driver: string | string[]): Promise<void> {\r\n        return localforage.setDriver(driver);\r\n    }\r\n\r\n    public config(options: LocalForageOptions): boolean {\r\n        return localforage.config(options);\r\n    }\r\n\r\n    public createInstance(options: LocalForageOptions): LocalForage {\r\n        return localforage.createInstance(options);\r\n    }\r\n}\r\n\r\nexport const _localForage: LocalForage = LocalForage.getInstance();\r\n\r\nclass LocalStorage {\r\n    private static instance = new LocalStorage();\r\n\r\n    private constructor() {}\r\n\r\n    public static getInstance(): LocalStorage {\r\n        return this.instance;\r\n    }\r\n\r\n    public setObject<T>(key: string, value: T): void {\r\n        this.setItem(key, JSON.stringify(value));\r\n    }\r\n\r\n    public getObject<T>(key: string): T | null {\r\n        const result = this.getItem(key);\r\n        if (result) {\r\n            return <T>JSON.parse(result);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public setItem(key: string, value: string): void {\r\n        localStorage.setItem(key, value);\r\n    }\r\n    public getItem(key: string): string | null {\r\n        return localStorage.getItem(key);\r\n    }\r\n\r\n    public removeItem(key: string): void {\r\n        localStorage.removeItem(key);\r\n    }\r\n\r\n    public clear(): void {\r\n        localStorage.clear();\r\n    }\r\n\r\n    public isExist(key: string): boolean {\r\n        if (key && key in localStorage) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport const _localStorage: LocalStorage = LocalStorage.getInstance();\r\n","import * as lodash from 'lodash';\r\n\r\nclass ArrayUtils {\r\n    private static instance = new ArrayUtils();\r\n\r\n    private constructor() {}\r\n\r\n    public static getInstance(): ArrayUtils {\r\n        return this.instance;\r\n    }\r\n\r\n    public find<T>(array: T[], element: T, comparator): T | undefined {\r\n        return lodash.find(array, (item) => item[comparator] === element[comparator]);\r\n    }\r\n\r\n    public remove<T>(array: T[], element: T, comparator): T[] {\r\n        return lodash.remove<T>(array, (item) => item[comparator] === element[comparator]);\r\n    }\r\n}\r\n\r\nexport const _array: ArrayUtils = ArrayUtils.getInstance();\r\n","import Swal, { SweetAlertIcon, SweetAlertResult } from 'sweetalert2';\r\n\r\n/**\r\n * 这里使用单例模式，主要是因为将静态类，赋值给Vue.prototype会出现 Property '' is a static member of type '' 错误。\r\n * 参考以下文章\r\n * {@see https://techformist.com/static-variables-methods-typescript/}\r\n * {@see https://www.xspdf.com/resolution/54250655.html}\r\n * {@see https://www.typescriptlang.org/docs/handbook/classes.html#static-properties}\r\n *\r\n * 单例模式饿汉式与懒汉式\r\n * {@see https://zhuanlan.zhihu.com/p/129264092}\r\n */\r\nclass Notify {\r\n    private static instance = new Notify();\r\n\r\n    private constructor() {}\r\n\r\n    public static getInstance(): Notify {\r\n        return this.instance;\r\n    }\r\n\r\n    public information(title: string, icon: SweetAlertIcon): Promise<SweetAlertResult<string>> {\r\n        return Swal.fire({\r\n            position: 'top',\r\n            title: title,\r\n            icon: icon,\r\n            timer: 2000,\r\n            showConfirmButton: false,\r\n        });\r\n    }\r\n\r\n    public info(text: string): Promise<SweetAlertResult<string>> {\r\n        return this.information(text, 'info');\r\n    }\r\n\r\n    public error(text: string): Promise<SweetAlertResult<string>> {\r\n        return this.information(text, 'error');\r\n    }\r\n\r\n    public warning(text: string): Promise<SweetAlertResult<string>> {\r\n        return this.information(text, 'warning');\r\n    }\r\n\r\n    public success(text: string): Promise<SweetAlertResult<string>> {\r\n        return this.information(text, 'success');\r\n    }\r\n\r\n    public question(text: string): Promise<SweetAlertResult<string>> {\r\n        return this.information(text, 'question');\r\n    }\r\n}\r\n\r\nexport const _notify: Notify = Notify.getInstance();\r\n\r\nexport { Swal, SweetAlertIcon, SweetAlertResult };\r\n","(function(){\n\n    // Copyright (c) 2005  Tom Wu\n    // All Rights Reserved.\n    // See \"LICENSE\" for details.\n\n    // Basic JavaScript BN library - subset useful for RSA encryption.\n\n    // Bits per digit\n    var dbits;\n\n    // JavaScript engine analysis\n    var canary = 0xdeadbeefcafe;\n    var j_lm = ((canary&0xffffff)==0xefcafe);\n\n    // (public) Constructor\n    function BigInteger(a,b,c) {\n      if(a != null)\n        if(\"number\" == typeof a) this.fromNumber(a,b,c);\n        else if(b == null && \"string\" != typeof a) this.fromString(a,256);\n        else this.fromString(a,b);\n    }\n\n    // return new, unset BigInteger\n    function nbi() { return new BigInteger(null); }\n\n    // am: Compute w_j += (x*this_i), propagate carries,\n    // c is initial carry, returns final carry.\n    // c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n    // We need to select the fastest one that works in this environment.\n\n    // am1: use a single mult and divide to get the high bits,\n    // max digit bits should be 26 because\n    // max internal value = 2*dvalue^2-2*dvalue (< 2^53)\n    function am1(i,x,w,j,c,n) {\n      while(--n >= 0) {\n        var v = x*this[i++]+w[j]+c;\n        c = Math.floor(v/0x4000000);\n        w[j++] = v&0x3ffffff;\n      }\n      return c;\n    }\n    // am2 avoids a big mult-and-extract completely.\n    // Max digit bits should be <= 30 because we do bitwise ops\n    // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\n    function am2(i,x,w,j,c,n) {\n      var xl = x&0x7fff, xh = x>>15;\n      while(--n >= 0) {\n        var l = this[i]&0x7fff;\n        var h = this[i++]>>15;\n        var m = xh*l+h*xl;\n        l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);\n        c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);\n        w[j++] = l&0x3fffffff;\n      }\n      return c;\n    }\n    // Alternately, set max digit bits to 28 since some\n    // browsers slow down when dealing with 32-bit numbers.\n    function am3(i,x,w,j,c,n) {\n      var xl = x&0x3fff, xh = x>>14;\n      while(--n >= 0) {\n        var l = this[i]&0x3fff;\n        var h = this[i++]>>14;\n        var m = xh*l+h*xl;\n        l = xl*l+((m&0x3fff)<<14)+w[j]+c;\n        c = (l>>28)+(m>>14)+xh*h;\n        w[j++] = l&0xfffffff;\n      }\n      return c;\n    }\n    var inBrowser = typeof navigator !== \"undefined\";\n    if(inBrowser && j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {\n      BigInteger.prototype.am = am2;\n      dbits = 30;\n    }\n    else if(inBrowser && j_lm && (navigator.appName != \"Netscape\")) {\n      BigInteger.prototype.am = am1;\n      dbits = 26;\n    }\n    else { // Mozilla/Netscape seems to prefer am3\n      BigInteger.prototype.am = am3;\n      dbits = 28;\n    }\n\n    BigInteger.prototype.DB = dbits;\n    BigInteger.prototype.DM = ((1<<dbits)-1);\n    BigInteger.prototype.DV = (1<<dbits);\n\n    var BI_FP = 52;\n    BigInteger.prototype.FV = Math.pow(2,BI_FP);\n    BigInteger.prototype.F1 = BI_FP-dbits;\n    BigInteger.prototype.F2 = 2*dbits-BI_FP;\n\n    // Digit conversions\n    var BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n    var BI_RC = new Array();\n    var rr,vv;\n    rr = \"0\".charCodeAt(0);\n    for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\n    rr = \"a\".charCodeAt(0);\n    for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n    rr = \"A\".charCodeAt(0);\n    for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\n    function int2char(n) { return BI_RM.charAt(n); }\n    function intAt(s,i) {\n      var c = BI_RC[s.charCodeAt(i)];\n      return (c==null)?-1:c;\n    }\n\n    // (protected) copy this to r\n    function bnpCopyTo(r) {\n      for(var i = this.t-1; i >= 0; --i) r[i] = this[i];\n      r.t = this.t;\n      r.s = this.s;\n    }\n\n    // (protected) set from integer value x, -DV <= x < DV\n    function bnpFromInt(x) {\n      this.t = 1;\n      this.s = (x<0)?-1:0;\n      if(x > 0) this[0] = x;\n      else if(x < -1) this[0] = x+this.DV;\n      else this.t = 0;\n    }\n\n    // return bigint initialized to value\n    function nbv(i) { var r = nbi(); r.fromInt(i); return r; }\n\n    // (protected) set from string and radix\n    function bnpFromString(s,b) {\n      var k;\n      if(b == 16) k = 4;\n      else if(b == 8) k = 3;\n      else if(b == 256) k = 8; // byte array\n      else if(b == 2) k = 1;\n      else if(b == 32) k = 5;\n      else if(b == 4) k = 2;\n      else { this.fromRadix(s,b); return; }\n      this.t = 0;\n      this.s = 0;\n      var i = s.length, mi = false, sh = 0;\n      while(--i >= 0) {\n        var x = (k==8)?s[i]&0xff:intAt(s,i);\n        if(x < 0) {\n          if(s.charAt(i) == \"-\") mi = true;\n          continue;\n        }\n        mi = false;\n        if(sh == 0)\n          this[this.t++] = x;\n        else if(sh+k > this.DB) {\n          this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;\n          this[this.t++] = (x>>(this.DB-sh));\n        }\n        else\n          this[this.t-1] |= x<<sh;\n        sh += k;\n        if(sh >= this.DB) sh -= this.DB;\n      }\n      if(k == 8 && (s[0]&0x80) != 0) {\n        this.s = -1;\n        if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;\n      }\n      this.clamp();\n      if(mi) BigInteger.ZERO.subTo(this,this);\n    }\n\n    // (protected) clamp off excess high words\n    function bnpClamp() {\n      var c = this.s&this.DM;\n      while(this.t > 0 && this[this.t-1] == c) --this.t;\n    }\n\n    // (public) return string representation in given radix\n    function bnToString(b) {\n      if(this.s < 0) return \"-\"+this.negate().toString(b);\n      var k;\n      if(b == 16) k = 4;\n      else if(b == 8) k = 3;\n      else if(b == 2) k = 1;\n      else if(b == 32) k = 5;\n      else if(b == 4) k = 2;\n      else return this.toRadix(b);\n      var km = (1<<k)-1, d, m = false, r = \"\", i = this.t;\n      var p = this.DB-(i*this.DB)%k;\n      if(i-- > 0) {\n        if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }\n        while(i >= 0) {\n          if(p < k) {\n            d = (this[i]&((1<<p)-1))<<(k-p);\n            d |= this[--i]>>(p+=this.DB-k);\n          }\n          else {\n            d = (this[i]>>(p-=k))&km;\n            if(p <= 0) { p += this.DB; --i; }\n          }\n          if(d > 0) m = true;\n          if(m) r += int2char(d);\n        }\n      }\n      return m?r:\"0\";\n    }\n\n    // (public) -this\n    function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }\n\n    // (public) |this|\n    function bnAbs() { return (this.s<0)?this.negate():this; }\n\n    // (public) return + if this > a, - if this < a, 0 if equal\n    function bnCompareTo(a) {\n      var r = this.s-a.s;\n      if(r != 0) return r;\n      var i = this.t;\n      r = i-a.t;\n      if(r != 0) return (this.s<0)?-r:r;\n      while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;\n      return 0;\n    }\n\n    // returns bit length of the integer x\n    function nbits(x) {\n      var r = 1, t;\n      if((t=x>>>16) != 0) { x = t; r += 16; }\n      if((t=x>>8) != 0) { x = t; r += 8; }\n      if((t=x>>4) != 0) { x = t; r += 4; }\n      if((t=x>>2) != 0) { x = t; r += 2; }\n      if((t=x>>1) != 0) { x = t; r += 1; }\n      return r;\n    }\n\n    // (public) return the number of bits in \"this\"\n    function bnBitLength() {\n      if(this.t <= 0) return 0;\n      return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));\n    }\n\n    // (protected) r = this << n*DB\n    function bnpDLShiftTo(n,r) {\n      var i;\n      for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];\n      for(i = n-1; i >= 0; --i) r[i] = 0;\n      r.t = this.t+n;\n      r.s = this.s;\n    }\n\n    // (protected) r = this >> n*DB\n    function bnpDRShiftTo(n,r) {\n      for(var i = n; i < this.t; ++i) r[i-n] = this[i];\n      r.t = Math.max(this.t-n,0);\n      r.s = this.s;\n    }\n\n    // (protected) r = this << n\n    function bnpLShiftTo(n,r) {\n      var bs = n%this.DB;\n      var cbs = this.DB-bs;\n      var bm = (1<<cbs)-1;\n      var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;\n      for(i = this.t-1; i >= 0; --i) {\n        r[i+ds+1] = (this[i]>>cbs)|c;\n        c = (this[i]&bm)<<bs;\n      }\n      for(i = ds-1; i >= 0; --i) r[i] = 0;\n      r[ds] = c;\n      r.t = this.t+ds+1;\n      r.s = this.s;\n      r.clamp();\n    }\n\n    // (protected) r = this >> n\n    function bnpRShiftTo(n,r) {\n      r.s = this.s;\n      var ds = Math.floor(n/this.DB);\n      if(ds >= this.t) { r.t = 0; return; }\n      var bs = n%this.DB;\n      var cbs = this.DB-bs;\n      var bm = (1<<bs)-1;\n      r[0] = this[ds]>>bs;\n      for(var i = ds+1; i < this.t; ++i) {\n        r[i-ds-1] |= (this[i]&bm)<<cbs;\n        r[i-ds] = this[i]>>bs;\n      }\n      if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;\n      r.t = this.t-ds;\n      r.clamp();\n    }\n\n    // (protected) r = this - a\n    function bnpSubTo(a,r) {\n      var i = 0, c = 0, m = Math.min(a.t,this.t);\n      while(i < m) {\n        c += this[i]-a[i];\n        r[i++] = c&this.DM;\n        c >>= this.DB;\n      }\n      if(a.t < this.t) {\n        c -= a.s;\n        while(i < this.t) {\n          c += this[i];\n          r[i++] = c&this.DM;\n          c >>= this.DB;\n        }\n        c += this.s;\n      }\n      else {\n        c += this.s;\n        while(i < a.t) {\n          c -= a[i];\n          r[i++] = c&this.DM;\n          c >>= this.DB;\n        }\n        c -= a.s;\n      }\n      r.s = (c<0)?-1:0;\n      if(c < -1) r[i++] = this.DV+c;\n      else if(c > 0) r[i++] = c;\n      r.t = i;\n      r.clamp();\n    }\n\n    // (protected) r = this * a, r != this,a (HAC 14.12)\n    // \"this\" should be the larger one if appropriate.\n    function bnpMultiplyTo(a,r) {\n      var x = this.abs(), y = a.abs();\n      var i = x.t;\n      r.t = i+y.t;\n      while(--i >= 0) r[i] = 0;\n      for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);\n      r.s = 0;\n      r.clamp();\n      if(this.s != a.s) BigInteger.ZERO.subTo(r,r);\n    }\n\n    // (protected) r = this^2, r != this (HAC 14.16)\n    function bnpSquareTo(r) {\n      var x = this.abs();\n      var i = r.t = 2*x.t;\n      while(--i >= 0) r[i] = 0;\n      for(i = 0; i < x.t-1; ++i) {\n        var c = x.am(i,x[i],r,2*i,0,1);\n        if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {\n          r[i+x.t] -= x.DV;\n          r[i+x.t+1] = 1;\n        }\n      }\n      if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);\n      r.s = 0;\n      r.clamp();\n    }\n\n    // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n    // r != q, this != m.  q or r may be null.\n    function bnpDivRemTo(m,q,r) {\n      var pm = m.abs();\n      if(pm.t <= 0) return;\n      var pt = this.abs();\n      if(pt.t < pm.t) {\n        if(q != null) q.fromInt(0);\n        if(r != null) this.copyTo(r);\n        return;\n      }\n      if(r == null) r = nbi();\n      var y = nbi(), ts = this.s, ms = m.s;\n      var nsh = this.DB-nbits(pm[pm.t-1]);   // normalize modulus\n      if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }\n      else { pm.copyTo(y); pt.copyTo(r); }\n      var ys = y.t;\n      var y0 = y[ys-1];\n      if(y0 == 0) return;\n      var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);\n      var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;\n      var i = r.t, j = i-ys, t = (q==null)?nbi():q;\n      y.dlShiftTo(j,t);\n      if(r.compareTo(t) >= 0) {\n        r[r.t++] = 1;\n        r.subTo(t,r);\n      }\n      BigInteger.ONE.dlShiftTo(ys,t);\n      t.subTo(y,y);  // \"negative\" y so we can replace sub with am later\n      while(y.t < ys) y[y.t++] = 0;\n      while(--j >= 0) {\n        // Estimate quotient digit\n        var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);\n        if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {   // Try it out\n          y.dlShiftTo(j,t);\n          r.subTo(t,r);\n          while(r[i] < --qd) r.subTo(t,r);\n        }\n      }\n      if(q != null) {\n        r.drShiftTo(ys,q);\n        if(ts != ms) BigInteger.ZERO.subTo(q,q);\n      }\n      r.t = ys;\n      r.clamp();\n      if(nsh > 0) r.rShiftTo(nsh,r); // Denormalize remainder\n      if(ts < 0) BigInteger.ZERO.subTo(r,r);\n    }\n\n    // (public) this mod a\n    function bnMod(a) {\n      var r = nbi();\n      this.abs().divRemTo(a,null,r);\n      if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);\n      return r;\n    }\n\n    // Modular reduction using \"classic\" algorithm\n    function Classic(m) { this.m = m; }\n    function cConvert(x) {\n      if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);\n      else return x;\n    }\n    function cRevert(x) { return x; }\n    function cReduce(x) { x.divRemTo(this.m,null,x); }\n    function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n    function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n    Classic.prototype.convert = cConvert;\n    Classic.prototype.revert = cRevert;\n    Classic.prototype.reduce = cReduce;\n    Classic.prototype.mulTo = cMulTo;\n    Classic.prototype.sqrTo = cSqrTo;\n\n    // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n    // justification:\n    //         xy == 1 (mod m)\n    //         xy =  1+km\n    //   xy(2-xy) = (1+km)(1-km)\n    // x[y(2-xy)] = 1-k^2m^2\n    // x[y(2-xy)] == 1 (mod m^2)\n    // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n    // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n    // JS multiply \"overflows\" differently from C/C++, so care is needed here.\n    function bnpInvDigit() {\n      if(this.t < 1) return 0;\n      var x = this[0];\n      if((x&1) == 0) return 0;\n      var y = x&3;       // y == 1/x mod 2^2\n      y = (y*(2-(x&0xf)*y))&0xf; // y == 1/x mod 2^4\n      y = (y*(2-(x&0xff)*y))&0xff;   // y == 1/x mod 2^8\n      y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;    // y == 1/x mod 2^16\n      // last step - calculate inverse mod DV directly;\n      // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n      y = (y*(2-x*y%this.DV))%this.DV;       // y == 1/x mod 2^dbits\n      // we really want the negative inverse, and -DV < y < DV\n      return (y>0)?this.DV-y:-y;\n    }\n\n    // Montgomery reduction\n    function Montgomery(m) {\n      this.m = m;\n      this.mp = m.invDigit();\n      this.mpl = this.mp&0x7fff;\n      this.mph = this.mp>>15;\n      this.um = (1<<(m.DB-15))-1;\n      this.mt2 = 2*m.t;\n    }\n\n    // xR mod m\n    function montConvert(x) {\n      var r = nbi();\n      x.abs().dlShiftTo(this.m.t,r);\n      r.divRemTo(this.m,null,r);\n      if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);\n      return r;\n    }\n\n    // x/R mod m\n    function montRevert(x) {\n      var r = nbi();\n      x.copyTo(r);\n      this.reduce(r);\n      return r;\n    }\n\n    // x = x/R mod m (HAC 14.32)\n    function montReduce(x) {\n      while(x.t <= this.mt2) // pad x so am has enough room later\n        x[x.t++] = 0;\n      for(var i = 0; i < this.m.t; ++i) {\n        // faster way of calculating u0 = x[i]*mp mod DV\n        var j = x[i]&0x7fff;\n        var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;\n        // use am to combine the multiply-shift-add into one call\n        j = i+this.m.t;\n        x[j] += this.m.am(0,u0,x,i,0,this.m.t);\n        // propagate carry\n        while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }\n      }\n      x.clamp();\n      x.drShiftTo(this.m.t,x);\n      if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\n    }\n\n    // r = \"x^2/R mod m\"; x != r\n    function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n    // r = \"xy/R mod m\"; x,y != r\n    function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n\n    Montgomery.prototype.convert = montConvert;\n    Montgomery.prototype.revert = montRevert;\n    Montgomery.prototype.reduce = montReduce;\n    Montgomery.prototype.mulTo = montMulTo;\n    Montgomery.prototype.sqrTo = montSqrTo;\n\n    // (protected) true iff this is even\n    function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }\n\n    // (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\n    function bnpExp(e,z) {\n      if(e > 0xffffffff || e < 1) return BigInteger.ONE;\n      var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;\n      g.copyTo(r);\n      while(--i >= 0) {\n        z.sqrTo(r,r2);\n        if((e&(1<<i)) > 0) z.mulTo(r2,g,r);\n        else { var t = r; r = r2; r2 = t; }\n      }\n      return z.revert(r);\n    }\n\n    // (public) this^e % m, 0 <= e < 2^32\n    function bnModPowInt(e,m) {\n      var z;\n      if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);\n      return this.exp(e,z);\n    }\n\n    // protected\n    BigInteger.prototype.copyTo = bnpCopyTo;\n    BigInteger.prototype.fromInt = bnpFromInt;\n    BigInteger.prototype.fromString = bnpFromString;\n    BigInteger.prototype.clamp = bnpClamp;\n    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;\n    BigInteger.prototype.drShiftTo = bnpDRShiftTo;\n    BigInteger.prototype.lShiftTo = bnpLShiftTo;\n    BigInteger.prototype.rShiftTo = bnpRShiftTo;\n    BigInteger.prototype.subTo = bnpSubTo;\n    BigInteger.prototype.multiplyTo = bnpMultiplyTo;\n    BigInteger.prototype.squareTo = bnpSquareTo;\n    BigInteger.prototype.divRemTo = bnpDivRemTo;\n    BigInteger.prototype.invDigit = bnpInvDigit;\n    BigInteger.prototype.isEven = bnpIsEven;\n    BigInteger.prototype.exp = bnpExp;\n\n    // public\n    BigInteger.prototype.toString = bnToString;\n    BigInteger.prototype.negate = bnNegate;\n    BigInteger.prototype.abs = bnAbs;\n    BigInteger.prototype.compareTo = bnCompareTo;\n    BigInteger.prototype.bitLength = bnBitLength;\n    BigInteger.prototype.mod = bnMod;\n    BigInteger.prototype.modPowInt = bnModPowInt;\n\n    // \"constants\"\n    BigInteger.ZERO = nbv(0);\n    BigInteger.ONE = nbv(1);\n\n    // Copyright (c) 2005-2009  Tom Wu\n    // All Rights Reserved.\n    // See \"LICENSE\" for details.\n\n    // Extended JavaScript BN functions, required for RSA private ops.\n\n    // Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n    // Version 1.2: square() API, isProbablePrime fix\n\n    // (public)\n    function bnClone() { var r = nbi(); this.copyTo(r); return r; }\n\n    // (public) return value as integer\n    function bnIntValue() {\n      if(this.s < 0) {\n        if(this.t == 1) return this[0]-this.DV;\n        else if(this.t == 0) return -1;\n      }\n      else if(this.t == 1) return this[0];\n      else if(this.t == 0) return 0;\n      // assumes 16 < DB < 32\n      return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];\n    }\n\n    // (public) return value as byte\n    function bnByteValue() { return (this.t==0)?this.s:(this[0]<<24)>>24; }\n\n    // (public) return value as short (assumes DB>=16)\n    function bnShortValue() { return (this.t==0)?this.s:(this[0]<<16)>>16; }\n\n    // (protected) return x s.t. r^x < DV\n    function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }\n\n    // (public) 0 if this == 0, 1 if this > 0\n    function bnSigNum() {\n      if(this.s < 0) return -1;\n      else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;\n      else return 1;\n    }\n\n    // (protected) convert to radix string\n    function bnpToRadix(b) {\n      if(b == null) b = 10;\n      if(this.signum() == 0 || b < 2 || b > 36) return \"0\";\n      var cs = this.chunkSize(b);\n      var a = Math.pow(b,cs);\n      var d = nbv(a), y = nbi(), z = nbi(), r = \"\";\n      this.divRemTo(d,y,z);\n      while(y.signum() > 0) {\n        r = (a+z.intValue()).toString(b).substr(1) + r;\n        y.divRemTo(d,y,z);\n      }\n      return z.intValue().toString(b) + r;\n    }\n\n    // (protected) convert from radix string\n    function bnpFromRadix(s,b) {\n      this.fromInt(0);\n      if(b == null) b = 10;\n      var cs = this.chunkSize(b);\n      var d = Math.pow(b,cs), mi = false, j = 0, w = 0;\n      for(var i = 0; i < s.length; ++i) {\n        var x = intAt(s,i);\n        if(x < 0) {\n          if(s.charAt(i) == \"-\" && this.signum() == 0) mi = true;\n          continue;\n        }\n        w = b*w+x;\n        if(++j >= cs) {\n          this.dMultiply(d);\n          this.dAddOffset(w,0);\n          j = 0;\n          w = 0;\n        }\n      }\n      if(j > 0) {\n        this.dMultiply(Math.pow(b,j));\n        this.dAddOffset(w,0);\n      }\n      if(mi) BigInteger.ZERO.subTo(this,this);\n    }\n\n    // (protected) alternate constructor\n    function bnpFromNumber(a,b,c) {\n      if(\"number\" == typeof b) {\n        // new BigInteger(int,int,RNG)\n        if(a < 2) this.fromInt(1);\n        else {\n          this.fromNumber(a,c);\n          if(!this.testBit(a-1))    // force MSB set\n            this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this);\n          if(this.isEven()) this.dAddOffset(1,0); // force odd\n          while(!this.isProbablePrime(b)) {\n            this.dAddOffset(2,0);\n            if(this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a-1),this);\n          }\n        }\n      }\n      else {\n        // new BigInteger(int,RNG)\n        var x = new Array(), t = a&7;\n        x.length = (a>>3)+1;\n        b.nextBytes(x);\n        if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;\n        this.fromString(x,256);\n      }\n    }\n\n    // (public) convert to bigendian byte array\n    function bnToByteArray() {\n      var i = this.t, r = new Array();\n      r[0] = this.s;\n      var p = this.DB-(i*this.DB)%8, d, k = 0;\n      if(i-- > 0) {\n        if(p < this.DB && (d = this[i]>>p) != (this.s&this.DM)>>p)\n          r[k++] = d|(this.s<<(this.DB-p));\n        while(i >= 0) {\n          if(p < 8) {\n            d = (this[i]&((1<<p)-1))<<(8-p);\n            d |= this[--i]>>(p+=this.DB-8);\n          }\n          else {\n            d = (this[i]>>(p-=8))&0xff;\n            if(p <= 0) { p += this.DB; --i; }\n          }\n          if((d&0x80) != 0) d |= -256;\n          if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;\n          if(k > 0 || d != this.s) r[k++] = d;\n        }\n      }\n      return r;\n    }\n\n    function bnEquals(a) { return(this.compareTo(a)==0); }\n    function bnMin(a) { return(this.compareTo(a)<0)?this:a; }\n    function bnMax(a) { return(this.compareTo(a)>0)?this:a; }\n\n    // (protected) r = this op a (bitwise)\n    function bnpBitwiseTo(a,op,r) {\n      var i, f, m = Math.min(a.t,this.t);\n      for(i = 0; i < m; ++i) r[i] = op(this[i],a[i]);\n      if(a.t < this.t) {\n        f = a.s&this.DM;\n        for(i = m; i < this.t; ++i) r[i] = op(this[i],f);\n        r.t = this.t;\n      }\n      else {\n        f = this.s&this.DM;\n        for(i = m; i < a.t; ++i) r[i] = op(f,a[i]);\n        r.t = a.t;\n      }\n      r.s = op(this.s,a.s);\n      r.clamp();\n    }\n\n    // (public) this & a\n    function op_and(x,y) { return x&y; }\n    function bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }\n\n    // (public) this | a\n    function op_or(x,y) { return x|y; }\n    function bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }\n\n    // (public) this ^ a\n    function op_xor(x,y) { return x^y; }\n    function bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }\n\n    // (public) this & ~a\n    function op_andnot(x,y) { return x&~y; }\n    function bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }\n\n    // (public) ~this\n    function bnNot() {\n      var r = nbi();\n      for(var i = 0; i < this.t; ++i) r[i] = this.DM&~this[i];\n      r.t = this.t;\n      r.s = ~this.s;\n      return r;\n    }\n\n    // (public) this << n\n    function bnShiftLeft(n) {\n      var r = nbi();\n      if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);\n      return r;\n    }\n\n    // (public) this >> n\n    function bnShiftRight(n) {\n      var r = nbi();\n      if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);\n      return r;\n    }\n\n    // return index of lowest 1-bit in x, x < 2^31\n    function lbit(x) {\n      if(x == 0) return -1;\n      var r = 0;\n      if((x&0xffff) == 0) { x >>= 16; r += 16; }\n      if((x&0xff) == 0) { x >>= 8; r += 8; }\n      if((x&0xf) == 0) { x >>= 4; r += 4; }\n      if((x&3) == 0) { x >>= 2; r += 2; }\n      if((x&1) == 0) ++r;\n      return r;\n    }\n\n    // (public) returns index of lowest 1-bit (or -1 if none)\n    function bnGetLowestSetBit() {\n      for(var i = 0; i < this.t; ++i)\n        if(this[i] != 0) return i*this.DB+lbit(this[i]);\n      if(this.s < 0) return this.t*this.DB;\n      return -1;\n    }\n\n    // return number of 1 bits in x\n    function cbit(x) {\n      var r = 0;\n      while(x != 0) { x &= x-1; ++r; }\n      return r;\n    }\n\n    // (public) return number of set bits\n    function bnBitCount() {\n      var r = 0, x = this.s&this.DM;\n      for(var i = 0; i < this.t; ++i) r += cbit(this[i]^x);\n      return r;\n    }\n\n    // (public) true iff nth bit is set\n    function bnTestBit(n) {\n      var j = Math.floor(n/this.DB);\n      if(j >= this.t) return(this.s!=0);\n      return((this[j]&(1<<(n%this.DB)))!=0);\n    }\n\n    // (protected) this op (1<<n)\n    function bnpChangeBit(n,op) {\n      var r = BigInteger.ONE.shiftLeft(n);\n      this.bitwiseTo(r,op,r);\n      return r;\n    }\n\n    // (public) this | (1<<n)\n    function bnSetBit(n) { return this.changeBit(n,op_or); }\n\n    // (public) this & ~(1<<n)\n    function bnClearBit(n) { return this.changeBit(n,op_andnot); }\n\n    // (public) this ^ (1<<n)\n    function bnFlipBit(n) { return this.changeBit(n,op_xor); }\n\n    // (protected) r = this + a\n    function bnpAddTo(a,r) {\n      var i = 0, c = 0, m = Math.min(a.t,this.t);\n      while(i < m) {\n        c += this[i]+a[i];\n        r[i++] = c&this.DM;\n        c >>= this.DB;\n      }\n      if(a.t < this.t) {\n        c += a.s;\n        while(i < this.t) {\n          c += this[i];\n          r[i++] = c&this.DM;\n          c >>= this.DB;\n        }\n        c += this.s;\n      }\n      else {\n        c += this.s;\n        while(i < a.t) {\n          c += a[i];\n          r[i++] = c&this.DM;\n          c >>= this.DB;\n        }\n        c += a.s;\n      }\n      r.s = (c<0)?-1:0;\n      if(c > 0) r[i++] = c;\n      else if(c < -1) r[i++] = this.DV+c;\n      r.t = i;\n      r.clamp();\n    }\n\n    // (public) this + a\n    function bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }\n\n    // (public) this - a\n    function bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }\n\n    // (public) this * a\n    function bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }\n\n    // (public) this^2\n    function bnSquare() { var r = nbi(); this.squareTo(r); return r; }\n\n    // (public) this / a\n    function bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }\n\n    // (public) this % a\n    function bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }\n\n    // (public) [this/a,this%a]\n    function bnDivideAndRemainder(a) {\n      var q = nbi(), r = nbi();\n      this.divRemTo(a,q,r);\n      return new Array(q,r);\n    }\n\n    // (protected) this *= n, this >= 0, 1 < n < DV\n    function bnpDMultiply(n) {\n      this[this.t] = this.am(0,n-1,this,0,0,this.t);\n      ++this.t;\n      this.clamp();\n    }\n\n    // (protected) this += n << w words, this >= 0\n    function bnpDAddOffset(n,w) {\n      if(n == 0) return;\n      while(this.t <= w) this[this.t++] = 0;\n      this[w] += n;\n      while(this[w] >= this.DV) {\n        this[w] -= this.DV;\n        if(++w >= this.t) this[this.t++] = 0;\n        ++this[w];\n      }\n    }\n\n    // A \"null\" reducer\n    function NullExp() {}\n    function nNop(x) { return x; }\n    function nMulTo(x,y,r) { x.multiplyTo(y,r); }\n    function nSqrTo(x,r) { x.squareTo(r); }\n\n    NullExp.prototype.convert = nNop;\n    NullExp.prototype.revert = nNop;\n    NullExp.prototype.mulTo = nMulTo;\n    NullExp.prototype.sqrTo = nSqrTo;\n\n    // (public) this^e\n    function bnPow(e) { return this.exp(e,new NullExp()); }\n\n    // (protected) r = lower n words of \"this * a\", a.t <= n\n    // \"this\" should be the larger one if appropriate.\n    function bnpMultiplyLowerTo(a,n,r) {\n      var i = Math.min(this.t+a.t,n);\n      r.s = 0; // assumes a,this >= 0\n      r.t = i;\n      while(i > 0) r[--i] = 0;\n      var j;\n      for(j = r.t-this.t; i < j; ++i) r[i+this.t] = this.am(0,a[i],r,i,0,this.t);\n      for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a[i],r,i,0,n-i);\n      r.clamp();\n    }\n\n    // (protected) r = \"this * a\" without lower n words, n > 0\n    // \"this\" should be the larger one if appropriate.\n    function bnpMultiplyUpperTo(a,n,r) {\n      --n;\n      var i = r.t = this.t+a.t-n;\n      r.s = 0; // assumes a,this >= 0\n      while(--i >= 0) r[i] = 0;\n      for(i = Math.max(n-this.t,0); i < a.t; ++i)\n        r[this.t+i-n] = this.am(n-i,a[i],r,0,0,this.t+i-n);\n      r.clamp();\n      r.drShiftTo(1,r);\n    }\n\n    // Barrett modular reduction\n    function Barrett(m) {\n      // setup Barrett\n      this.r2 = nbi();\n      this.q3 = nbi();\n      BigInteger.ONE.dlShiftTo(2*m.t,this.r2);\n      this.mu = this.r2.divide(m);\n      this.m = m;\n    }\n\n    function barrettConvert(x) {\n      if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);\n      else if(x.compareTo(this.m) < 0) return x;\n      else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }\n    }\n\n    function barrettRevert(x) { return x; }\n\n    // x = x mod m (HAC 14.42)\n    function barrettReduce(x) {\n      x.drShiftTo(this.m.t-1,this.r2);\n      if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }\n      this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);\n      this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);\n      while(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);\n      x.subTo(this.r2,x);\n      while(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\n    }\n\n    // r = x^2 mod m; x != r\n    function barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n    // r = x*y mod m; x,y != r\n    function barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n\n    Barrett.prototype.convert = barrettConvert;\n    Barrett.prototype.revert = barrettRevert;\n    Barrett.prototype.reduce = barrettReduce;\n    Barrett.prototype.mulTo = barrettMulTo;\n    Barrett.prototype.sqrTo = barrettSqrTo;\n\n    // (public) this^e % m (HAC 14.85)\n    function bnModPow(e,m) {\n      var i = e.bitLength(), k, r = nbv(1), z;\n      if(i <= 0) return r;\n      else if(i < 18) k = 1;\n      else if(i < 48) k = 3;\n      else if(i < 144) k = 4;\n      else if(i < 768) k = 5;\n      else k = 6;\n      if(i < 8)\n        z = new Classic(m);\n      else if(m.isEven())\n        z = new Barrett(m);\n      else\n        z = new Montgomery(m);\n\n      // precomputation\n      var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;\n      g[1] = z.convert(this);\n      if(k > 1) {\n        var g2 = nbi();\n        z.sqrTo(g[1],g2);\n        while(n <= km) {\n          g[n] = nbi();\n          z.mulTo(g2,g[n-2],g[n]);\n          n += 2;\n        }\n      }\n\n      var j = e.t-1, w, is1 = true, r2 = nbi(), t;\n      i = nbits(e[j])-1;\n      while(j >= 0) {\n        if(i >= k1) w = (e[j]>>(i-k1))&km;\n        else {\n          w = (e[j]&((1<<(i+1))-1))<<(k1-i);\n          if(j > 0) w |= e[j-1]>>(this.DB+i-k1);\n        }\n\n        n = k;\n        while((w&1) == 0) { w >>= 1; --n; }\n        if((i -= n) < 0) { i += this.DB; --j; }\n        if(is1) {    // ret == 1, don't bother squaring or multiplying it\n          g[w].copyTo(r);\n          is1 = false;\n        }\n        else {\n          while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }\n          if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }\n          z.mulTo(r2,g[w],r);\n        }\n\n        while(j >= 0 && (e[j]&(1<<i)) == 0) {\n          z.sqrTo(r,r2); t = r; r = r2; r2 = t;\n          if(--i < 0) { i = this.DB-1; --j; }\n        }\n      }\n      return z.revert(r);\n    }\n\n    // (public) gcd(this,a) (HAC 14.54)\n    function bnGCD(a) {\n      var x = (this.s<0)?this.negate():this.clone();\n      var y = (a.s<0)?a.negate():a.clone();\n      if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }\n      var i = x.getLowestSetBit(), g = y.getLowestSetBit();\n      if(g < 0) return x;\n      if(i < g) g = i;\n      if(g > 0) {\n        x.rShiftTo(g,x);\n        y.rShiftTo(g,y);\n      }\n      while(x.signum() > 0) {\n        if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);\n        if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);\n        if(x.compareTo(y) >= 0) {\n          x.subTo(y,x);\n          x.rShiftTo(1,x);\n        }\n        else {\n          y.subTo(x,y);\n          y.rShiftTo(1,y);\n        }\n      }\n      if(g > 0) y.lShiftTo(g,y);\n      return y;\n    }\n\n    // (protected) this % n, n < 2^26\n    function bnpModInt(n) {\n      if(n <= 0) return 0;\n      var d = this.DV%n, r = (this.s<0)?n-1:0;\n      if(this.t > 0)\n        if(d == 0) r = this[0]%n;\n        else for(var i = this.t-1; i >= 0; --i) r = (d*r+this[i])%n;\n      return r;\n    }\n\n    // (public) 1/this % m (HAC 14.61)\n    function bnModInverse(m) {\n      var ac = m.isEven();\n      if((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;\n      var u = m.clone(), v = this.clone();\n      var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);\n      while(u.signum() != 0) {\n        while(u.isEven()) {\n          u.rShiftTo(1,u);\n          if(ac) {\n            if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }\n            a.rShiftTo(1,a);\n          }\n          else if(!b.isEven()) b.subTo(m,b);\n          b.rShiftTo(1,b);\n        }\n        while(v.isEven()) {\n          v.rShiftTo(1,v);\n          if(ac) {\n            if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }\n            c.rShiftTo(1,c);\n          }\n          else if(!d.isEven()) d.subTo(m,d);\n          d.rShiftTo(1,d);\n        }\n        if(u.compareTo(v) >= 0) {\n          u.subTo(v,u);\n          if(ac) a.subTo(c,a);\n          b.subTo(d,b);\n        }\n        else {\n          v.subTo(u,v);\n          if(ac) c.subTo(a,c);\n          d.subTo(b,d);\n        }\n      }\n      if(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\n      if(d.compareTo(m) >= 0) return d.subtract(m);\n      if(d.signum() < 0) d.addTo(m,d); else return d;\n      if(d.signum() < 0) return d.add(m); else return d;\n    }\n\n    var lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];\n    var lplim = (1<<26)/lowprimes[lowprimes.length-1];\n\n    // (public) test primality with certainty >= 1-.5^t\n    function bnIsProbablePrime(t) {\n      var i, x = this.abs();\n      if(x.t == 1 && x[0] <= lowprimes[lowprimes.length-1]) {\n        for(i = 0; i < lowprimes.length; ++i)\n          if(x[0] == lowprimes[i]) return true;\n        return false;\n      }\n      if(x.isEven()) return false;\n      i = 1;\n      while(i < lowprimes.length) {\n        var m = lowprimes[i], j = i+1;\n        while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];\n        m = x.modInt(m);\n        while(i < j) if(m%lowprimes[i++] == 0) return false;\n      }\n      return x.millerRabin(t);\n    }\n\n    // (protected) true if probably prime (HAC 4.24, Miller-Rabin)\n    function bnpMillerRabin(t) {\n      var n1 = this.subtract(BigInteger.ONE);\n      var k = n1.getLowestSetBit();\n      if(k <= 0) return false;\n      var r = n1.shiftRight(k);\n      t = (t+1)>>1;\n      if(t > lowprimes.length) t = lowprimes.length;\n      var a = nbi();\n      for(var i = 0; i < t; ++i) {\n        //Pick bases at random, instead of starting at 2\n        a.fromInt(lowprimes[Math.floor(Math.random()*lowprimes.length)]);\n        var y = a.modPow(r,this);\n        if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n          var j = 1;\n          while(j++ < k && y.compareTo(n1) != 0) {\n            y = y.modPowInt(2,this);\n            if(y.compareTo(BigInteger.ONE) == 0) return false;\n          }\n          if(y.compareTo(n1) != 0) return false;\n        }\n      }\n      return true;\n    }\n\n    // protected\n    BigInteger.prototype.chunkSize = bnpChunkSize;\n    BigInteger.prototype.toRadix = bnpToRadix;\n    BigInteger.prototype.fromRadix = bnpFromRadix;\n    BigInteger.prototype.fromNumber = bnpFromNumber;\n    BigInteger.prototype.bitwiseTo = bnpBitwiseTo;\n    BigInteger.prototype.changeBit = bnpChangeBit;\n    BigInteger.prototype.addTo = bnpAddTo;\n    BigInteger.prototype.dMultiply = bnpDMultiply;\n    BigInteger.prototype.dAddOffset = bnpDAddOffset;\n    BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\n    BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\n    BigInteger.prototype.modInt = bnpModInt;\n    BigInteger.prototype.millerRabin = bnpMillerRabin;\n\n    // public\n    BigInteger.prototype.clone = bnClone;\n    BigInteger.prototype.intValue = bnIntValue;\n    BigInteger.prototype.byteValue = bnByteValue;\n    BigInteger.prototype.shortValue = bnShortValue;\n    BigInteger.prototype.signum = bnSigNum;\n    BigInteger.prototype.toByteArray = bnToByteArray;\n    BigInteger.prototype.equals = bnEquals;\n    BigInteger.prototype.min = bnMin;\n    BigInteger.prototype.max = bnMax;\n    BigInteger.prototype.and = bnAnd;\n    BigInteger.prototype.or = bnOr;\n    BigInteger.prototype.xor = bnXor;\n    BigInteger.prototype.andNot = bnAndNot;\n    BigInteger.prototype.not = bnNot;\n    BigInteger.prototype.shiftLeft = bnShiftLeft;\n    BigInteger.prototype.shiftRight = bnShiftRight;\n    BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\n    BigInteger.prototype.bitCount = bnBitCount;\n    BigInteger.prototype.testBit = bnTestBit;\n    BigInteger.prototype.setBit = bnSetBit;\n    BigInteger.prototype.clearBit = bnClearBit;\n    BigInteger.prototype.flipBit = bnFlipBit;\n    BigInteger.prototype.add = bnAdd;\n    BigInteger.prototype.subtract = bnSubtract;\n    BigInteger.prototype.multiply = bnMultiply;\n    BigInteger.prototype.divide = bnDivide;\n    BigInteger.prototype.remainder = bnRemainder;\n    BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\n    BigInteger.prototype.modPow = bnModPow;\n    BigInteger.prototype.modInverse = bnModInverse;\n    BigInteger.prototype.pow = bnPow;\n    BigInteger.prototype.gcd = bnGCD;\n    BigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n\n    // JSBN-specific extension\n    BigInteger.prototype.square = bnSquare;\n\n    // Expose the Barrett function\n    BigInteger.prototype.Barrett = Barrett\n\n    // BigInteger interfaces not implemented in jsbn:\n\n    // BigInteger(int signum, byte[] magnitude)\n    // double doubleValue()\n    // float floatValue()\n    // int hashCode()\n    // long longValue()\n    // static BigInteger valueOf(long val)\n\n    // Random number generator - requires a PRNG backend, e.g. prng4.js\n\n    // For best results, put code like\n    // <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>\n    // in your main HTML document.\n\n    var rng_state;\n    var rng_pool;\n    var rng_pptr;\n\n    // Mix in a 32-bit integer into the pool\n    function rng_seed_int(x) {\n      rng_pool[rng_pptr++] ^= x & 255;\n      rng_pool[rng_pptr++] ^= (x >> 8) & 255;\n      rng_pool[rng_pptr++] ^= (x >> 16) & 255;\n      rng_pool[rng_pptr++] ^= (x >> 24) & 255;\n      if(rng_pptr >= rng_psize) rng_pptr -= rng_psize;\n    }\n\n    // Mix in the current time (w/milliseconds) into the pool\n    function rng_seed_time() {\n      rng_seed_int(new Date().getTime());\n    }\n\n    // Initialize the pool with junk if needed.\n    if(rng_pool == null) {\n      rng_pool = new Array();\n      rng_pptr = 0;\n      var t;\n      if(typeof window !== \"undefined\" && window.crypto) {\n        if (window.crypto.getRandomValues) {\n          // Use webcrypto if available\n          var ua = new Uint8Array(32);\n          window.crypto.getRandomValues(ua);\n          for(t = 0; t < 32; ++t)\n            rng_pool[rng_pptr++] = ua[t];\n        }\n        else if(navigator.appName == \"Netscape\" && navigator.appVersion < \"5\") {\n          // Extract entropy (256 bits) from NS4 RNG if available\n          var z = window.crypto.random(32);\n          for(t = 0; t < z.length; ++t)\n            rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;\n        }\n      }\n      while(rng_pptr < rng_psize) {  // extract some randomness from Math.random()\n        t = Math.floor(65536 * Math.random());\n        rng_pool[rng_pptr++] = t >>> 8;\n        rng_pool[rng_pptr++] = t & 255;\n      }\n      rng_pptr = 0;\n      rng_seed_time();\n      //rng_seed_int(window.screenX);\n      //rng_seed_int(window.screenY);\n    }\n\n    function rng_get_byte() {\n      if(rng_state == null) {\n        rng_seed_time();\n        rng_state = prng_newstate();\n        rng_state.init(rng_pool);\n        for(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)\n          rng_pool[rng_pptr] = 0;\n        rng_pptr = 0;\n        //rng_pool = null;\n      }\n      // TODO: allow reseeding after first request\n      return rng_state.next();\n    }\n\n    function rng_get_bytes(ba) {\n      var i;\n      for(i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();\n    }\n\n    function SecureRandom() {}\n\n    SecureRandom.prototype.nextBytes = rng_get_bytes;\n\n    // prng4.js - uses Arcfour as a PRNG\n\n    function Arcfour() {\n      this.i = 0;\n      this.j = 0;\n      this.S = new Array();\n    }\n\n    // Initialize arcfour context from key, an array of ints, each from [0..255]\n    function ARC4init(key) {\n      var i, j, t;\n      for(i = 0; i < 256; ++i)\n        this.S[i] = i;\n      j = 0;\n      for(i = 0; i < 256; ++i) {\n        j = (j + this.S[i] + key[i % key.length]) & 255;\n        t = this.S[i];\n        this.S[i] = this.S[j];\n        this.S[j] = t;\n      }\n      this.i = 0;\n      this.j = 0;\n    }\n\n    function ARC4next() {\n      var t;\n      this.i = (this.i + 1) & 255;\n      this.j = (this.j + this.S[this.i]) & 255;\n      t = this.S[this.i];\n      this.S[this.i] = this.S[this.j];\n      this.S[this.j] = t;\n      return this.S[(t + this.S[this.i]) & 255];\n    }\n\n    Arcfour.prototype.init = ARC4init;\n    Arcfour.prototype.next = ARC4next;\n\n    // Plug in your RNG constructor here\n    function prng_newstate() {\n      return new Arcfour();\n    }\n\n    // Pool size must be a multiple of 4 and greater than 32.\n    // An array of bytes the size of the pool will be passed to init()\n    var rng_psize = 256;\n\n    if (typeof exports !== 'undefined') {\n        exports = module.exports = {\n            default: BigInteger,\n            BigInteger: BigInteger,\n            SecureRandom: SecureRandom,\n        };\n    } else {\n        this.jsbn = {\n          BigInteger: BigInteger,\n          SecureRandom: SecureRandom\n        };\n    }\n\n}).call(this);\n","/* eslint-disable class-methods-use-this */\r\nconst {BigInteger} = require('jsbn')\r\n\r\nfunction bigintToValue(bigint) {\r\n  let h = bigint.toString(16)\r\n  if (h[0] !== '-') {\r\n    // 正数\r\n    if (h.length % 2 === 1) h = '0' + h // 补齐到整字节\r\n    else if (!h.match(/^[0-7]/)) h = '00' + h // 非0开头，则补一个全0字节\r\n  } else {\r\n    // 负数\r\n    h = h.substr(1)\r\n\r\n    let len = h.length\r\n    if (len % 2 === 1) len += 1 // 补齐到整字节\r\n    else if (!h.match(/^[0-7]/)) len += 2 // 非0开头，则补一个全0字节\r\n\r\n    let mask = ''\r\n    for (let i = 0; i < len; i++) mask += 'f'\r\n    mask = new BigInteger(mask, 16)\r\n\r\n    // 对绝对值取反，加1\r\n    h = mask.xor(bigint).add(BigInteger.ONE)\r\n    h = h.toString(16).replace(/^-/, '')\r\n  }\r\n  return h\r\n}\r\n\r\nclass ASN1Object {\r\n  constructor() {\r\n    this.tlv = null\r\n    this.t = '00'\r\n    this.l = '00'\r\n    this.v = ''\r\n  }\r\n\r\n  /**\r\n   * 获取 der 编码比特流16进制串\r\n   */\r\n  getEncodedHex() {\r\n    if (!this.tlv) {\r\n      this.v = this.getValue()\r\n      this.l = this.getLength()\r\n      this.tlv = this.t + this.l + this.v\r\n    }\r\n    return this.tlv\r\n  }\r\n\r\n  getLength() {\r\n    const n = this.v.length / 2 // 字节数\r\n    let nHex = n.toString(16)\r\n    if (nHex.length % 2 === 1) nHex = '0' + nHex // 补齐到整字节\r\n\r\n    if (n < 128) {\r\n      // 短格式，以 0 开头\r\n      return nHex\r\n    } else {\r\n      // 长格式，以 1 开头\r\n      const head = 128 + nHex.length / 2 // 1(1位) + 真正的长度占用字节数(7位) + 真正的长度\r\n      return head.toString(16) + nHex\r\n    }\r\n  }\r\n\r\n  getValue() {\r\n    return ''\r\n  }\r\n}\r\n\r\nclass DERInteger extends ASN1Object {\r\n  constructor(bigint) {\r\n    super()\r\n\r\n    this.t = '02' // 整型标签说明\r\n    if (bigint) this.v = bigintToValue(bigint)\r\n  }\r\n\r\n  getValue() {\r\n    return this.v\r\n  }\r\n}\r\n\r\nclass DERSequence extends ASN1Object {\r\n  constructor(asn1Array) {\r\n    super()\r\n\r\n    this.t = '30' // 序列标签说明\r\n    this.asn1Array = asn1Array\r\n  }\r\n\r\n  getValue() {\r\n    this.v = this.asn1Array.map(asn1Object => asn1Object.getEncodedHex()).join('')\r\n    return this.v\r\n  }\r\n}\r\n\r\n/**\r\n * 获取 l 占用字节数\r\n */\r\nfunction getLenOfL(str, start) {\r\n  if (+str[start + 2] < 8) return 1 // l 以0开头，则表示短格式，只占一个字节\r\n  return +str.substr(start + 2, 2) & 0x7f + 1 // 长格式，取第一个字节后7位作为长度真正占用字节数，再加上本身\r\n}\r\n\r\n/**\r\n * 获取 l\r\n */\r\nfunction getL(str, start) {\r\n  // 获取 l\r\n  const len = getLenOfL(str, start)\r\n  const l = str.substr(start + 2, len * 2)\r\n\r\n  if (!l) return -1\r\n  const bigint = +l[0] < 8 ? new BigInteger(l, 16) : new BigInteger(l.substr(2), 16)\r\n\r\n  return bigint.intValue()\r\n}\r\n\r\n/**\r\n * 获取 v 的位置\r\n */\r\nfunction getStartOfV(str, start) {\r\n  const len = getLenOfL(str, start)\r\n  return start + (len + 1) * 2\r\n}\r\n\r\nmodule.exports = {\r\n  /**\r\n   * ASN.1 der 编码，针对 sm2 签名\r\n   */\r\n  encodeDer(r, s) {\r\n    const derR = new DERInteger(r)\r\n    const derS = new DERInteger(s)\r\n    const derSeq = new DERSequence([derR, derS])\r\n\r\n    return derSeq.getEncodedHex()\r\n  },\r\n\r\n  /**\r\n   * 解析 ASN.1 der，针对 sm2 验签\r\n   */\r\n  decodeDer(input) {\r\n    // 结构：\r\n    // input = | tSeq | lSeq | vSeq |\r\n    // vSeq = | tR | lR | vR | tS | lS | vS |\r\n    const start = getStartOfV(input, 0)\r\n\r\n    const vIndexR = getStartOfV(input, start)\r\n    const lR = getL(input, start)\r\n    const vR = input.substr(vIndexR, lR * 2)\r\n\r\n    const nextStart = vIndexR + vR.length\r\n    const vIndexS = getStartOfV(input, nextStart)\r\n    const lS = getL(input, nextStart)\r\n    const vS = input.substr(vIndexS, lS * 2)\r\n\r\n    const r = new BigInteger(vR, 16)\r\n    const s = new BigInteger(vS, 16)\r\n\r\n    return {r, s}\r\n  }\r\n}\r\n","/* eslint-disable no-case-declarations, max-len */\r\nconst {BigInteger} = require('jsbn')\r\n\r\n/**\r\n * thanks for Tom Wu : http://www-cs-students.stanford.edu/~tjw/jsbn/\r\n *\r\n * Basic Javascript Elliptic Curve implementation\r\n * Ported loosely from BouncyCastle's Java EC code\r\n * Only Fp curves implemented for now\r\n */\r\n\r\nconst THREE = new BigInteger('3')\r\n\r\n/**\r\n * 椭圆曲线域元素\r\n */\r\nclass ECFieldElementFp {\r\n  constructor(q, x) {\r\n    this.x = x\r\n    this.q = q\r\n    // TODO if (x.compareTo(q) >= 0) error\r\n  }\r\n\r\n  /**\r\n   * 判断相等\r\n   */\r\n  equals(other) {\r\n    if (other === this) return true\r\n    return (this.q.equals(other.q) && this.x.equals(other.x))\r\n  }\r\n\r\n  /**\r\n   * 返回具体数值\r\n   */\r\n  toBigInteger() {\r\n    return this.x\r\n  }\r\n\r\n  /**\r\n   * 取反\r\n   */\r\n  negate() {\r\n    return new ECFieldElementFp(this.q, this.x.negate().mod(this.q))\r\n  }\r\n\r\n  /**\r\n   * 相加\r\n   */\r\n  add(b) {\r\n    return new ECFieldElementFp(this.q, this.x.add(b.toBigInteger()).mod(this.q))\r\n  }\r\n\r\n  /**\r\n   * 相减\r\n   */\r\n  subtract(b) {\r\n    return new ECFieldElementFp(this.q, this.x.subtract(b.toBigInteger()).mod(this.q))\r\n  }\r\n\r\n  /**\r\n   * 相乘\r\n   */\r\n  multiply(b) {\r\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger()).mod(this.q))\r\n  }\r\n\r\n  /**\r\n   * 相除\r\n   */\r\n  divide(b) {\r\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger().modInverse(this.q)).mod(this.q))\r\n  }\r\n\r\n  /**\r\n   * 平方\r\n   */\r\n  square() {\r\n    return new ECFieldElementFp(this.q, this.x.square().mod(this.q))\r\n  }\r\n}\r\n\r\nclass ECPointFp {\r\n  constructor(curve, x, y, z) {\r\n    this.curve = curve\r\n    this.x = x\r\n    this.y = y\r\n    // 标准射影坐标系：zinv == null 或 z * zinv == 1\r\n    this.z = z == null ? BigInteger.ONE : z\r\n    this.zinv = null\r\n    // TODO: compression flag\r\n  }\r\n\r\n  getX() {\r\n    if (this.zinv === null) this.zinv = this.z.modInverse(this.curve.q)\r\n\r\n    return this.curve.fromBigInteger(this.x.toBigInteger().multiply(this.zinv).mod(this.curve.q))\r\n  }\r\n\r\n  getY() {\r\n    if (this.zinv === null) this.zinv = this.z.modInverse(this.curve.q)\r\n\r\n    return this.curve.fromBigInteger(this.y.toBigInteger().multiply(this.zinv).mod(this.curve.q))\r\n  }\r\n\r\n  /**\r\n   * 判断相等\r\n   */\r\n  equals(other) {\r\n    if (other === this) return true\r\n    if (this.isInfinity()) return other.isInfinity()\r\n    if (other.isInfinity()) return this.isInfinity()\r\n\r\n    // u = y2 * z1 - y1 * z2\r\n    const u = other.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(other.z)).mod(this.curve.q)\r\n    if (!u.equals(BigInteger.ZERO)) return false\r\n\r\n    // v = x2 * z1 - x1 * z2\r\n    const v = other.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(other.z)).mod(this.curve.q)\r\n    return v.equals(BigInteger.ZERO)\r\n  }\r\n\r\n  /**\r\n   * 是否是无穷远点\r\n   */\r\n  isInfinity() {\r\n    if ((this.x === null) && (this.y === null)) return true\r\n    return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO)\r\n  }\r\n\r\n  /**\r\n   * 取反，x 轴对称点\r\n   */\r\n  negate() {\r\n    return new ECPointFp(this.curve, this.x, this.y.negate(), this.z)\r\n  }\r\n\r\n  /**\r\n   * 相加\r\n   *\r\n   * 标准射影坐标系：\r\n   *\r\n   * λ1 = x1 * z2\r\n   * λ2 = x2 * z1\r\n   * λ3 = λ1 − λ2\r\n   * λ4 = y1 * z2\r\n   * λ5 = y2 * z1\r\n   * λ6 = λ4 − λ5\r\n   * λ7 = λ1 + λ2\r\n   * λ8 = z1 * z2\r\n   * λ9 = λ3^2\r\n   * λ10 = λ3 * λ9\r\n   * λ11 = λ8 * λ6^2 − λ7 * λ9\r\n   * x3 = λ3 * λ11\r\n   * y3 = λ6 * (λ9 * λ1 − λ11) − λ4 * λ10\r\n   * z3 = λ10 * λ8\r\n   */\r\n  add(b) {\r\n    if (this.isInfinity()) return b\r\n    if (b.isInfinity()) return this\r\n\r\n    const x1 = this.x.toBigInteger()\r\n    const y1 = this.y.toBigInteger()\r\n    const z1 = this.z\r\n    const x2 = b.x.toBigInteger()\r\n    const y2 = b.y.toBigInteger()\r\n    const z2 = b.z\r\n    const q = this.curve.q\r\n\r\n    const w1 = x1.multiply(z2).mod(q)\r\n    const w2 = x2.multiply(z1).mod(q)\r\n    const w3 = w1.subtract(w2)\r\n    const w4 = y1.multiply(z2).mod(q)\r\n    const w5 = y2.multiply(z1).mod(q)\r\n    const w6 = w4.subtract(w5)\r\n\r\n    if (BigInteger.ZERO.equals(w3)) {\r\n      if (BigInteger.ZERO.equals(w6)) {\r\n        return this.twice() // this == b，计算自加\r\n      }\r\n      return this.curve.infinity // this == -b，则返回无穷远点\r\n    }\r\n\r\n    const w7 = w1.add(w2)\r\n    const w8 = z1.multiply(z2).mod(q)\r\n    const w9 = w3.square().mod(q)\r\n    const w10 = w3.multiply(w9).mod(q)\r\n    const w11 = w8.multiply(w6.square()).subtract(w7.multiply(w9)).mod(q)\r\n\r\n    const x3 = w3.multiply(w11).mod(q)\r\n    const y3 = w6.multiply(w9.multiply(w1).subtract(w11)).subtract(w4.multiply(w10)).mod(q)\r\n    const z3 = w10.multiply(w8).mod(q)\r\n\r\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3)\r\n  }\r\n\r\n  /**\r\n   * 自加\r\n   *\r\n   * 标准射影坐标系：\r\n   *\r\n   * λ1 = 3 * x1^2 + a * z1^2\r\n   * λ2 = 2 * y1 * z1\r\n   * λ3 = y1^2\r\n   * λ4 = λ3 * x1 * z1\r\n   * λ5 = λ2^2\r\n   * λ6 = λ1^2 − 8 * λ4\r\n   * x3 = λ2 * λ6\r\n   * y3 = λ1 * (4 * λ4 − λ6) − 2 * λ5 * λ3\r\n   * z3 = λ2 * λ5\r\n   */\r\n  twice() {\r\n    if (this.isInfinity()) return this\r\n    if (!this.y.toBigInteger().signum()) return this.curve.infinity\r\n\r\n    const x1 = this.x.toBigInteger()\r\n    const y1 = this.y.toBigInteger()\r\n    const z1 = this.z\r\n    const q = this.curve.q\r\n    const a = this.curve.a.toBigInteger()\r\n\r\n    const w1 = x1.square().multiply(THREE).add(a.multiply(z1.square())).mod(q)\r\n    const w2 = y1.shiftLeft(1).multiply(z1).mod(q)\r\n    const w3 = y1.square().mod(q)\r\n    const w4 = w3.multiply(x1).multiply(z1).mod(q)\r\n    const w5 = w2.square().mod(q)\r\n    const w6 = w1.square().subtract(w4.shiftLeft(3)).mod(q)\r\n\r\n    const x3 = w2.multiply(w6).mod(q)\r\n    const y3 = w1.multiply(w4.shiftLeft(2).subtract(w6)).subtract(w5.shiftLeft(1).multiply(w3)).mod(q)\r\n    const z3 = w2.multiply(w5).mod(q)\r\n\r\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3)\r\n  }\r\n\r\n  /**\r\n   * 倍点计算\r\n   */\r\n  multiply(k) {\r\n    if (this.isInfinity()) return this\r\n    if (!k.signum()) return this.curve.infinity\r\n\r\n    // 使用加减法\r\n    const k3 = k.multiply(THREE)\r\n    const neg = this.negate()\r\n    let Q = this\r\n\r\n    for (let i = k3.bitLength() - 2; i > 0; i--) {\r\n      Q = Q.twice()\r\n\r\n      const k3Bit = k3.testBit(i)\r\n      const kBit = k.testBit(i)\r\n\r\n      if (k3Bit !== kBit) {\r\n        Q = Q.add(k3Bit ? this : neg)\r\n      }\r\n    }\r\n\r\n    return Q\r\n  }\r\n}\r\n\r\n/**\r\n * 椭圆曲线 y^2 = x^3 + ax + b\r\n */\r\nclass ECCurveFp {\r\n  constructor(q, a, b) {\r\n    this.q = q\r\n    this.a = this.fromBigInteger(a)\r\n    this.b = this.fromBigInteger(b)\r\n    this.infinity = new ECPointFp(this, null, null) // 无穷远点\r\n  }\r\n\r\n  /**\r\n   * 判断两个椭圆曲线是否相等\r\n   */\r\n  equals(other) {\r\n    if (other === this) return true\r\n    return (this.q.equals(other.q) && this.a.equals(other.a) && this.b.equals(other.b))\r\n  }\r\n\r\n  /**\r\n   * 生成椭圆曲线域元素\r\n   */\r\n  fromBigInteger(x) {\r\n    return new ECFieldElementFp(this.q, x)\r\n  }\r\n\r\n  /**\r\n   * 解析 16 进制串为椭圆曲线点\r\n   */\r\n  decodePointHex(s) {\r\n    switch (parseInt(s.substr(0, 2), 16)) {\r\n      // 第一个字节\r\n      case 0:\r\n        return this.infinity\r\n      case 2:\r\n      case 3:\r\n        // 不支持的压缩方式\r\n        return null\r\n      case 4:\r\n      case 6:\r\n      case 7:\r\n        const len = (s.length - 2) / 2\r\n        const xHex = s.substr(2, len)\r\n        const yHex = s.substr(len + 2, len)\r\n\r\n        return new ECPointFp(this, this.fromBigInteger(new BigInteger(xHex, 16)), this.fromBigInteger(new BigInteger(yHex, 16)))\r\n      default:\r\n        // 不支持\r\n        return null\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  ECPointFp,\r\n  ECCurveFp,\r\n}\r\n","/* eslint-disable no-bitwise, no-mixed-operators, no-use-before-define, max-len */\nconst {BigInteger, SecureRandom} = require('jsbn')\nconst {ECCurveFp} = require('./ec')\n\nconst rng = new SecureRandom()\nconst {curve, G, n} = generateEcparam()\n\n/**\n * 获取公共椭圆曲线\n */\nfunction getGlobalCurve() {\n  return curve\n}\n\n/**\n * 生成ecparam\n */\nfunction generateEcparam() {\n  // 椭圆曲线\n  const p = new BigInteger('FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF', 16)\n  const a = new BigInteger('FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC', 16)\n  const b = new BigInteger('28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93', 16)\n  const curve = new ECCurveFp(p, a, b)\n\n  // 基点\n  const gxHex = '32C4AE2C1F1981195F9904466A39C9948FE30BBFF2660BE1715A4589334C74C7'\n  const gyHex = 'BC3736A2F4F6779C59BDCEE36B692153D0A9877CC62A474002DF32E52139F0A0'\n  const G = curve.decodePointHex('04' + gxHex + gyHex)\n\n  const n = new BigInteger('FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123', 16)\n\n  return {curve, G, n}\n}\n\n/**\n * 生成密钥对：publicKey = privateKey * G\n */\nfunction generateKeyPairHex(a, b, c) {\n  const random = a ? new BigInteger(a, b, c) : new BigInteger(n.bitLength(), rng)\n  const d = random.mod(n.subtract(BigInteger.ONE)).add(BigInteger.ONE) // 随机数\n  const privateKey = leftPad(d.toString(16), 64)\n\n  const P = G.multiply(d) // P = dG，p 为公钥，d 为私钥\n  const Px = leftPad(P.getX().toBigInteger().toString(16), 64)\n  const Py = leftPad(P.getY().toBigInteger().toString(16), 64)\n  const publicKey = '04' + Px + Py\n\n  return {privateKey, publicKey}\n}\n\n/**\n * utf8串转16进制串\n */\nfunction utf8ToHex(input) {\n  input = unescape(encodeURIComponent(input))\n\n  const length = input.length\n\n  // 转换到字数组\n  const words = []\n  for (let i = 0; i < length; i++) {\n    words[i >>> 2] |= (input.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8)\n  }\n\n  // 转换到16进制\n  const hexChars = []\n  for (let i = 0; i < length; i++) {\n    const bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff\n    hexChars.push((bite >>> 4).toString(16))\n    hexChars.push((bite & 0x0f).toString(16))\n  }\n\n  return hexChars.join('')\n}\n\n/**\n * 补全16进制字符串\n */\nfunction leftPad(input, num) {\n  if (input.length >= num) return input\n\n  return (new Array(num - input.length + 1)).join('0') + input\n}\n\n/**\n * 转成16进制串\n */\nfunction arrayToHex(arr) {\n  return arr.map(item => {\n    item = item.toString(16)\n    return item.length === 1 ? '0' + item : item\n  }).join('')\n}\n\n/**\n * 转成utf8串\n */\nfunction arrayToUtf8(arr) {\n  const words = []\n  let j = 0\n  for (let i = 0; i < arr.length * 2; i += 2) {\n    words[i >>> 3] |= parseInt(arr[j], 10) << (24 - (i % 8) * 4)\n    j++\n  }\n\n  try {\n    const latin1Chars = []\n\n    for (let i = 0; i < arr.length; i++) {\n      const bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff\n      latin1Chars.push(String.fromCharCode(bite))\n    }\n\n    return decodeURIComponent(escape(latin1Chars.join('')))\n  } catch (e) {\n    throw new Error('Malformed UTF-8 data')\n  }\n}\n\n/**\n * 转成字节数组\n */\nfunction hexToArray(hexStr) {\n  const words = []\n  let hexStrLength = hexStr.length\n\n  if (hexStrLength % 2 !== 0) {\n    hexStr = leftPad(hexStr, hexStrLength + 1)\n  }\n\n  hexStrLength = hexStr.length\n\n  for (let i = 0; i < hexStrLength; i += 2) {\n    words.push(parseInt(hexStr.substr(i, 2), 16))\n  }\n  return words\n}\n\n/**\n * 验证公钥是否为椭圆曲线上的点\n */\nfunction verifyPublicKey(publicKey) {\n  const point = curve.decodePointHex(publicKey)\n  if (!point) return false\n\n  const x = point.getX()\n  const y = point.getY()\n\n  // 验证 y^2 是否等于 x^3 + ax + b\n  return y.square().equals(x.multiply(x.square()).add(x.multiply(curve.a)).add(curve.b))\n}\n\nmodule.exports = {\n  getGlobalCurve,\n  generateEcparam,\n  generateKeyPairHex,\n  utf8ToHex,\n  leftPad,\n  arrayToHex,\n  arrayToUtf8,\n  hexToArray,\n  verifyPublicKey,\n}\n","/**\n * 循环左移\n */\nfunction rotl(x, n) {\n  const result = []\n  const a = ~~(n / 8) // 偏移 a 字节\n  const b = n % 8 // 偏移 b 位\n  for (let i = 0, len = x.length; i < len; i++) {\n    // current << b + (current + 1) >>> (8 - b)\n    result[i] = ((x[(i + a) % len] << b) & 0xff) + ((x[(i + a + 1) % len] >>> (8 - b)) & 0xff)\n  }\n  return result\n}\n\n/**\n * 二进制异或运算\n */\nfunction xor(x, y) {\n  const result = []\n  for (let i = x.length - 1; i >= 0; i--) result[i] = (x[i] ^ y[i]) & 0xff\n  return result\n}\n\n/**\n * 二进制与运算\n */\nfunction and(x, y) {\n  const result = []\n  for (let i = x.length - 1; i >= 0; i--) result[i] = (x[i] & y[i]) & 0xff\n  return result\n}\n\n/**\n * 二进制或运算\n */\nfunction or(x, y) {\n  const result = []\n  for (let i = x.length - 1; i >= 0; i--) result[i] = (x[i] | y[i]) & 0xff\n  return result\n}\n\n/**\n * 二进制与运算\n */\nfunction add(x, y) {\n  const result = []\n  let temp = 0\n  for (let i = x.length - 1; i >= 0; i--) {\n    const sum = x[i] + y[i] + temp\n    if (sum > 0xff) {\n      temp = 1\n      result[i] = sum & 0xff\n    } else {\n      temp = 0\n      result[i] = sum & 0xff\n    }\n  }\n  return result\n}\n\n/**\n * 二进制非运算\n */\nfunction not(x) {\n  const result = []\n  for (let i = x.length - 1; i >= 0; i--) result[i] = (~x[i]) & 0xff\n  return result\n}\n\n/**\n * 压缩函数中的置换函数 P1(X) = X xor (X <<< 9) xor (X <<< 17)\n */\nfunction P0(X) {\n  return xor(xor(X, rotl(X, 9)), rotl(X, 17))\n}\n\n/**\n * 消息扩展中的置换函数 P1(X) = X xor (X <<< 15) xor (X <<< 23)\n */\nfunction P1(X) {\n  return xor(xor(X, rotl(X, 15)), rotl(X, 23))\n}\n\n/**\n * 布尔函数 FF\n */\nfunction FF(X, Y, Z, j) {\n  return j >= 0 && j <= 15 ? xor(xor(X, Y), Z) : or(or(and(X, Y), and(X, Z)), and(Y, Z))\n}\n\n/**\n * 布尔函数 GG\n */\nfunction GG(X, Y, Z, j) {\n  return j >= 0 && j <= 15 ? xor(xor(X, Y), Z) : or(and(X, Y), and(not(X), Z))\n}\n\n/**\n * 压缩函数\n */\nfunction CF(V, Bi) {\n  // 消息扩展\n  const W = []\n  const M = [] // W'\n\n  // 将消息分组B划分为 16 个字 W0， W1，……，W15\n  for (let i = 0; i < 16; i++) {\n    const start = i * 4\n    W.push(Bi.slice(start, start + 4))\n  }\n\n  // W16 ～ W67：W[j] <- P1(W[j−16] xor W[j−9] xor (W[j−3] <<< 15)) xor (W[j−13] <<< 7) xor W[j−6]\n  for (let j = 16; j < 68; j++) {\n    W.push(xor(\n      xor(\n        P1(\n          xor(\n            xor(W[j - 16], W[j - 9]),\n            rotl(W[j - 3], 15)\n          )\n        ),\n        rotl(W[j - 13], 7)\n      ),\n      W[j - 6]\n    ))\n  }\n\n  // W′0 ～ W′63：W′[j] = W[j] xor W[j+4]\n  for (let j = 0; j < 64; j++) {\n    M.push(xor(W[j], W[j + 4]))\n  }\n\n  // 压缩\n  const T1 = [0x79, 0xcc, 0x45, 0x19]\n  const T2 = [0x7a, 0x87, 0x9d, 0x8a]\n  // 字寄存器\n  let A = V.slice(0, 4)\n  let B = V.slice(4, 8)\n  let C = V.slice(8, 12)\n  let D = V.slice(12, 16)\n  let E = V.slice(16, 20)\n  let F = V.slice(20, 24)\n  let G = V.slice(24, 28)\n  let H = V.slice(28, 32)\n  // 中间变量\n  let SS1\n  let SS2\n  let TT1\n  let TT2\n  for (let j = 0; j < 64; j++) {\n    const T = j >= 0 && j <= 15 ? T1 : T2\n    SS1 = rotl(add(\n      add(rotl(A, 12), E),\n      rotl(T, j)\n    ), 7)\n    SS2 = xor(SS1, rotl(A, 12))\n\n    TT1 = add(add(add(FF(A, B, C, j), D), SS2), M[j])\n    TT2 = add(add(add(GG(E, F, G, j), H), SS1), W[j])\n\n    D = C\n    C = rotl(B, 9)\n    B = A\n    A = TT1\n    H = G\n    G = rotl(F, 19)\n    F = E\n    E = P0(TT2)\n  }\n\n  return xor([].concat(A, B, C, D, E, F, G, H), V)\n}\n\nmodule.exports = function (array) {\n  // 填充\n  let len = array.length * 8\n\n  // k 是满足 len + 1 + k = 448mod512 的最小的非负整数\n  let k = len % 512\n  // 如果 448 <= (512 % len) < 512，需要多补充 (len % 448) 比特'0'以满足总比特长度为512的倍数\n  k = k >= 448 ? 512 - (k % 448) - 1 : 448 - k - 1\n\n  // 填充\n  const kArr = new Array((k - 7) / 8)\n  for (let i = 0, len = kArr.length; i < len; i++) kArr[i] = 0\n  const lenArr = []\n  len = len.toString(2)\n  for (let i = 7; i >= 0; i--) {\n    if (len.length > 8) {\n      const start = len.length - 8\n      lenArr[i] = parseInt(len.substr(start), 2)\n      len = len.substr(0, start)\n    } else if (len.length > 0) {\n      lenArr[i] = parseInt(len, 2)\n      len = ''\n    } else {\n      lenArr[i] = 0\n    }\n  }\n  const m = [].concat(array, [0x80], kArr, lenArr)\n\n  // 迭代压缩\n  const n = m.length / 64\n  let V = [0x73, 0x80, 0x16, 0x6f, 0x49, 0x14, 0xb2, 0xb9, 0x17, 0x24, 0x42, 0xd7, 0xda, 0x8a, 0x06, 0x00, 0xa9, 0x6f, 0x30, 0xbc, 0x16, 0x31, 0x38, 0xaa, 0xe3, 0x8d, 0xee, 0x4d, 0xb0, 0xfb, 0x0e, 0x4e]\n  for (let i = 0; i < n; i++) {\n    const start = 64 * i\n    const B = m.slice(start, start + 64)\n    V = CF(V, B)\n  }\n  return V\n}\n","/* eslint-disable no-use-before-define */\nconst {BigInteger} = require('jsbn')\nconst {encodeDer, decodeDer} = require('./asn1')\nconst _ = require('./utils')\nconst sm3 = require('./sm3')\n\nconst {G, curve, n} = _.generateEcparam()\nconst C1C2C3 = 0\n\n/**\n * 加密\n */\nfunction doEncrypt(msg, publicKey, cipherMode = 1) {\n  msg = typeof msg === 'string' ? _.hexToArray(_.utf8ToHex(msg)) : Array.prototype.slice.call(msg)\n  publicKey = _.getGlobalCurve().decodePointHex(publicKey) // 先将公钥转成点\n\n  const keypair = _.generateKeyPairHex()\n  const k = new BigInteger(keypair.privateKey, 16) // 随机数 k\n\n  // c1 = k * G\n  let c1 = keypair.publicKey\n  if (c1.length > 128) c1 = c1.substr(c1.length - 128)\n\n  // (x2, y2) = k * publicKey\n  const p = publicKey.multiply(k)\n  const x2 = _.hexToArray(_.leftPad(p.getX().toBigInteger().toRadix(16), 64))\n  const y2 = _.hexToArray(_.leftPad(p.getY().toBigInteger().toRadix(16), 64))\n\n  // c3 = hash(x2 || msg || y2)\n  const c3 = _.arrayToHex(sm3([].concat(x2, msg, y2)))\n\n  let ct = 1\n  let offset = 0\n  let t = [] // 256 位\n  const z = [].concat(x2, y2)\n  const nextT = () => {\n    // (1) Hai = hash(z || ct)\n    // (2) ct++\n    t = sm3([...z, ct >> 24 & 0x00ff, ct >> 16 & 0x00ff, ct >> 8 & 0x00ff, ct & 0x00ff])\n    ct++\n    offset = 0\n  }\n  nextT() // 先生成 Ha1\n\n  for (let i = 0, len = msg.length; i < len; i++) {\n    // t = Ha1 || Ha2 || Ha3 || Ha4\n    if (offset === t.length) nextT()\n\n    // c2 = msg ^ t\n    msg[i] ^= t[offset++] & 0xff\n  }\n  const c2 = _.arrayToHex(msg)\n\n  return cipherMode === C1C2C3 ? c1 + c2 + c3 : c1 + c3 + c2\n}\n\n/**\n * 解密\n */\nfunction doDecrypt(encryptData, privateKey, cipherMode = 1, {\n  output = 'string',\n} = {}) {\n  privateKey = new BigInteger(privateKey, 16)\n\n  let c3 = encryptData.substr(128, 64)\n  let c2 = encryptData.substr(128 + 64)\n\n  if (cipherMode === C1C2C3) {\n    c3 = encryptData.substr(encryptData.length - 64)\n    c2 = encryptData.substr(128, encryptData.length - 128 - 64)\n  }\n\n  const msg = _.hexToArray(c2)\n  const c1 = _.getGlobalCurve().decodePointHex('04' + encryptData.substr(0, 128))\n\n  const p = c1.multiply(privateKey)\n  const x2 = _.hexToArray(_.leftPad(p.getX().toBigInteger().toRadix(16), 64))\n  const y2 = _.hexToArray(_.leftPad(p.getY().toBigInteger().toRadix(16), 64))\n\n  let ct = 1\n  let offset = 0\n  let t = [] // 256 位\n  const z = [].concat(x2, y2)\n  const nextT = () => {\n    // (1) Hai = hash(z || ct)\n    // (2) ct++\n    t = sm3([...z, ct >> 24 & 0x00ff, ct >> 16 & 0x00ff, ct >> 8 & 0x00ff, ct & 0x00ff])\n    ct++\n    offset = 0\n  }\n  nextT() // 先生成 Ha1\n\n  for (let i = 0, len = msg.length; i < len; i++) {\n    // t = Ha1 || Ha2 || Ha3 || Ha4\n    if (offset === t.length) nextT()\n\n    // c2 = msg ^ t\n    msg[i] ^= t[offset++] & 0xff\n  }\n\n  // c3 = hash(x2 || msg || y2)\n  const checkC3 = _.arrayToHex(sm3([].concat(x2, msg, y2)))\n\n  if (checkC3 === c3.toLowerCase()) {\n    return output === 'array' ? msg : _.arrayToUtf8(msg)\n  } else {\n    return output === 'array' ? [] : ''\n  }\n}\n\n/**\n * 签名\n */\nfunction doSignature(msg, privateKey, {\n  pointPool, der, hash, publicKey, userId\n} = {}) {\n  let hashHex = typeof msg === 'string' ? _.utf8ToHex(msg) : _.arrayToHex(msg)\n\n  if (hash) {\n    // sm3杂凑\n    publicKey = publicKey || getPublicKeyFromPrivateKey(privateKey)\n    hashHex = getHash(hashHex, publicKey, userId)\n  }\n\n  const dA = new BigInteger(privateKey, 16)\n  const e = new BigInteger(hashHex, 16)\n\n  // k\n  let k = null\n  let r = null\n  let s = null\n\n  do {\n    do {\n      let point\n      if (pointPool && pointPool.length) {\n        point = pointPool.pop()\n      } else {\n        point = getPoint()\n      }\n      k = point.k\n\n      // r = (e + x1) mod n\n      r = e.add(point.x1).mod(n)\n    } while (r.equals(BigInteger.ZERO) || r.add(k).equals(n))\n\n    // s = ((1 + dA)^-1 * (k - r * dA)) mod n\n    s = dA.add(BigInteger.ONE).modInverse(n).multiply(k.subtract(r.multiply(dA))).mod(n)\n  } while (s.equals(BigInteger.ZERO))\n\n  if (der) return encodeDer(r, s) // asn.1 der 编码\n\n  return _.leftPad(r.toString(16), 64) + _.leftPad(s.toString(16), 64)\n}\n\n/**\n * 验签\n */\nfunction doVerifySignature(msg, signHex, publicKey, {der, hash, userId} = {}) {\n  let hashHex = typeof msg === 'string' ? _.utf8ToHex(msg) : _.arrayToHex(msg)\n\n  if (hash) {\n    // sm3杂凑\n    hashHex = getHash(hashHex, publicKey, userId)\n  }\n\n  let r; let\n    s\n  if (der) {\n    const decodeDerObj = decodeDer(signHex) // asn.1 der 解码\n    r = decodeDerObj.r\n    s = decodeDerObj.s\n  } else {\n    r = new BigInteger(signHex.substring(0, 64), 16)\n    s = new BigInteger(signHex.substring(64), 16)\n  }\n\n  const PA = curve.decodePointHex(publicKey)\n  const e = new BigInteger(hashHex, 16)\n\n  // t = (r + s) mod n\n  const t = r.add(s).mod(n)\n\n  if (t.equals(BigInteger.ZERO)) return false\n\n  // x1y1 = s * G + t * PA\n  const x1y1 = G.multiply(s).add(PA.multiply(t))\n\n  // R = (e + x1) mod n\n  const R = e.add(x1y1.getX().toBigInteger()).mod(n)\n\n  return r.equals(R)\n}\n\n/**\n * sm3杂凑算法\n */\nfunction getHash(hashHex, publicKey, userId = '1234567812345678') {\n  // z = hash(entl || userId || a || b || gx || gy || px || py)\n  userId = _.utf8ToHex(userId)\n  const a = _.leftPad(G.curve.a.toBigInteger().toRadix(16), 64)\n  const b = _.leftPad(G.curve.b.toBigInteger().toRadix(16), 64)\n  const gx = _.leftPad(G.getX().toBigInteger().toRadix(16), 64)\n  const gy = _.leftPad(G.getY().toBigInteger().toRadix(16), 64)\n  if (publicKey.length > 128) publicKey = publicKey.substr(2, 128) // 干掉 '04'\n  const px = publicKey.substr(0, 64)\n  const py = publicKey.substr(64, 64)\n  const data = _.hexToArray(userId + a + b + gx + gy + px + py)\n\n  const entl = userId.length * 4\n  data.unshift(entl & 0x00ff)\n  data.unshift(entl >> 8 & 0x00ff)\n\n  const z = sm3(data)\n\n  // e = hash(z || msg)\n  return _.arrayToHex(sm3(z.concat(_.hexToArray(hashHex))))\n}\n\n/**\n * 计算公钥\n */\nfunction getPublicKeyFromPrivateKey(privateKey) {\n  const PA = G.multiply(new BigInteger(privateKey, 16))\n  const x = _.leftPad(PA.getX().toBigInteger().toString(16), 64)\n  const y = _.leftPad(PA.getY().toBigInteger().toString(16), 64)\n  return '04' + x + y\n}\n\n/**\n * 获取椭圆曲线点\n */\nfunction getPoint() {\n  const keypair = _.generateKeyPairHex()\n  const PA = curve.decodePointHex(keypair.publicKey)\n\n  keypair.k = new BigInteger(keypair.privateKey, 16)\n  keypair.x1 = PA.getX().toBigInteger()\n\n  return keypair\n}\n\nmodule.exports = {\n  generateKeyPairHex: _.generateKeyPairHex,\n  doEncrypt,\n  doDecrypt,\n  doSignature,\n  doVerifySignature,\n  getPoint,\n  verifyPublicKey: _.verifyPublicKey,\n}\n","const sm3 = require('../sm2/sm3')\n\n/**\n * 字节数组转 16 进制串\n */\nfunction ArrayToHex(arr) {\n  return arr.map(item => {\n    item = item.toString(16)\n    return item.length === 1 ? '0' + item : item\n  }).join('')\n}\n\n/**\n * utf8 串转字节数组\n */\nfunction utf8ToArray(str) {\n  const arr = []\n\n  for (let i = 0, len = str.length; i < len; i++) {\n    const point = str.codePointAt(i)\n\n    if (point <= 0x007f) {\n      // 单字节，标量值：00000000 00000000 0zzzzzzz\n      arr.push(point)\n    } else if (point <= 0x07ff) {\n      // 双字节，标量值：00000000 00000yyy yyzzzzzz\n      arr.push(0xc0 | (point >>> 6)) // 110yyyyy（0xc0-0xdf）\n      arr.push(0x80 | (point & 0x3f)) // 10zzzzzz（0x80-0xbf）\n    } else if (point <= 0xD7FF || (point >= 0xE000 && point <= 0xFFFF)) {\n      // 三字节：标量值：00000000 xxxxyyyy yyzzzzzz\n      arr.push(0xe0 | (point >>> 12)) // 1110xxxx（0xe0-0xef）\n      arr.push(0x80 | ((point >>> 6) & 0x3f)) // 10yyyyyy（0x80-0xbf）\n      arr.push(0x80 | (point & 0x3f)) // 10zzzzzz（0x80-0xbf）\n    } else if (point >= 0x010000 && point <= 0x10FFFF) {\n      // 四字节：标量值：000wwwxx xxxxyyyy yyzzzzzz\n      i++\n      arr.push((0xf0 | (point >>> 18) & 0x1c)) // 11110www（0xf0-0xf7）\n      arr.push((0x80 | ((point >>> 12) & 0x3f))) // 10xxxxxx（0x80-0xbf）\n      arr.push((0x80 | ((point >>> 6) & 0x3f))) // 10yyyyyy（0x80-0xbf）\n      arr.push((0x80 | (point & 0x3f))) // 10zzzzzz（0x80-0xbf）\n    } else {\n      // 五、六字节，暂时不支持\n      arr.push(point)\n      throw new Error('input is not supported')\n    }\n  }\n\n  return arr\n}\n\nmodule.exports = function (input) {\n  input = typeof input === 'string' ? utf8ToArray(input) : Array.prototype.slice.call(input)\n  return ArrayToHex(sm3(input))\n}\n","/* eslint-disable no-bitwise, no-mixed-operators, complexity */\r\nconst DECRYPT = 0\r\nconst ROUND = 32\r\nconst BLOCK = 16\r\n\r\nconst Sbox = [\r\n  0xd6, 0x90, 0xe9, 0xfe, 0xcc, 0xe1, 0x3d, 0xb7, 0x16, 0xb6, 0x14, 0xc2, 0x28, 0xfb, 0x2c, 0x05,\r\n  0x2b, 0x67, 0x9a, 0x76, 0x2a, 0xbe, 0x04, 0xc3, 0xaa, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99,\r\n  0x9c, 0x42, 0x50, 0xf4, 0x91, 0xef, 0x98, 0x7a, 0x33, 0x54, 0x0b, 0x43, 0xed, 0xcf, 0xac, 0x62,\r\n  0xe4, 0xb3, 0x1c, 0xa9, 0xc9, 0x08, 0xe8, 0x95, 0x80, 0xdf, 0x94, 0xfa, 0x75, 0x8f, 0x3f, 0xa6,\r\n  0x47, 0x07, 0xa7, 0xfc, 0xf3, 0x73, 0x17, 0xba, 0x83, 0x59, 0x3c, 0x19, 0xe6, 0x85, 0x4f, 0xa8,\r\n  0x68, 0x6b, 0x81, 0xb2, 0x71, 0x64, 0xda, 0x8b, 0xf8, 0xeb, 0x0f, 0x4b, 0x70, 0x56, 0x9d, 0x35,\r\n  0x1e, 0x24, 0x0e, 0x5e, 0x63, 0x58, 0xd1, 0xa2, 0x25, 0x22, 0x7c, 0x3b, 0x01, 0x21, 0x78, 0x87,\r\n  0xd4, 0x00, 0x46, 0x57, 0x9f, 0xd3, 0x27, 0x52, 0x4c, 0x36, 0x02, 0xe7, 0xa0, 0xc4, 0xc8, 0x9e,\r\n  0xea, 0xbf, 0x8a, 0xd2, 0x40, 0xc7, 0x38, 0xb5, 0xa3, 0xf7, 0xf2, 0xce, 0xf9, 0x61, 0x15, 0xa1,\r\n  0xe0, 0xae, 0x5d, 0xa4, 0x9b, 0x34, 0x1a, 0x55, 0xad, 0x93, 0x32, 0x30, 0xf5, 0x8c, 0xb1, 0xe3,\r\n  0x1d, 0xf6, 0xe2, 0x2e, 0x82, 0x66, 0xca, 0x60, 0xc0, 0x29, 0x23, 0xab, 0x0d, 0x53, 0x4e, 0x6f,\r\n  0xd5, 0xdb, 0x37, 0x45, 0xde, 0xfd, 0x8e, 0x2f, 0x03, 0xff, 0x6a, 0x72, 0x6d, 0x6c, 0x5b, 0x51,\r\n  0x8d, 0x1b, 0xaf, 0x92, 0xbb, 0xdd, 0xbc, 0x7f, 0x11, 0xd9, 0x5c, 0x41, 0x1f, 0x10, 0x5a, 0xd8,\r\n  0x0a, 0xc1, 0x31, 0x88, 0xa5, 0xcd, 0x7b, 0xbd, 0x2d, 0x74, 0xd0, 0x12, 0xb8, 0xe5, 0xb4, 0xb0,\r\n  0x89, 0x69, 0x97, 0x4a, 0x0c, 0x96, 0x77, 0x7e, 0x65, 0xb9, 0xf1, 0x09, 0xc5, 0x6e, 0xc6, 0x84,\r\n  0x18, 0xf0, 0x7d, 0xec, 0x3a, 0xdc, 0x4d, 0x20, 0x79, 0xee, 0x5f, 0x3e, 0xd7, 0xcb, 0x39, 0x48\r\n]\r\n\r\nconst CK = [\r\n  0x00070e15, 0x1c232a31, 0x383f464d, 0x545b6269,\r\n  0x70777e85, 0x8c939aa1, 0xa8afb6bd, 0xc4cbd2d9,\r\n  0xe0e7eef5, 0xfc030a11, 0x181f262d, 0x343b4249,\r\n  0x50575e65, 0x6c737a81, 0x888f969d, 0xa4abb2b9,\r\n  0xc0c7ced5, 0xdce3eaf1, 0xf8ff060d, 0x141b2229,\r\n  0x30373e45, 0x4c535a61, 0x686f767d, 0x848b9299,\r\n  0xa0a7aeb5, 0xbcc3cad1, 0xd8dfe6ed, 0xf4fb0209,\r\n  0x10171e25, 0x2c333a41, 0x484f565d, 0x646b7279\r\n]\r\n\r\n/**\r\n * 16 进制串转字节数组\r\n */\r\nfunction hexToArray(str) {\r\n  const arr = []\r\n  for (let i = 0, len = str.length; i < len; i += 2) {\r\n    arr.push(parseInt(str.substr(i, 2), 16))\r\n  }\r\n  return arr\r\n}\r\n\r\n/**\r\n * 字节数组转 16 进制串\r\n */\r\nfunction ArrayToHex(arr) {\r\n  return arr.map(item => {\r\n    item = item.toString(16)\r\n    return item.length === 1 ? '0' + item : item\r\n  }).join('')\r\n}\r\n\r\n/**\r\n * utf8 串转字节数组\r\n */\r\nfunction utf8ToArray(str) {\r\n  const arr = []\r\n\r\n  for (let i = 0, len = str.length; i < len; i++) {\r\n    const point = str.codePointAt(i)\r\n\r\n    if (point <= 0x007f) {\r\n      // 单字节，标量值：00000000 00000000 0zzzzzzz\r\n      arr.push(point)\r\n    } else if (point <= 0x07ff) {\r\n      // 双字节，标量值：00000000 00000yyy yyzzzzzz\r\n      arr.push(0xc0 | (point >>> 6)) // 110yyyyy（0xc0-0xdf）\r\n      arr.push(0x80 | (point & 0x3f)) // 10zzzzzz（0x80-0xbf）\r\n    } else if (point <= 0xD7FF || (point >= 0xE000 && point <= 0xFFFF)) {\r\n      // 三字节：标量值：00000000 xxxxyyyy yyzzzzzz\r\n      arr.push(0xe0 | (point >>> 12)) // 1110xxxx（0xe0-0xef）\r\n      arr.push(0x80 | ((point >>> 6) & 0x3f)) // 10yyyyyy（0x80-0xbf）\r\n      arr.push(0x80 | (point & 0x3f)) // 10zzzzzz（0x80-0xbf）\r\n    } else if (point >= 0x010000 && point <= 0x10FFFF) {\r\n      // 四字节：标量值：000wwwxx xxxxyyyy yyzzzzzz\r\n      i++\r\n      arr.push((0xf0 | (point >>> 18) & 0x1c)) // 11110www（0xf0-0xf7）\r\n      arr.push((0x80 | ((point >>> 12) & 0x3f))) // 10xxxxxx（0x80-0xbf）\r\n      arr.push((0x80 | ((point >>> 6) & 0x3f))) // 10yyyyyy（0x80-0xbf）\r\n      arr.push((0x80 | (point & 0x3f))) // 10zzzzzz（0x80-0xbf）\r\n    } else {\r\n      // 五、六字节，暂时不支持\r\n      arr.push(point)\r\n      throw new Error('input is not supported')\r\n    }\r\n  }\r\n\r\n  return arr\r\n}\r\n\r\n/**\r\n * 字节数组转 utf8 串\r\n */\r\nfunction arrayToUtf8(arr) {\r\n  const str = []\r\n  for (let i = 0, len = arr.length; i < len; i++) {\r\n    if (arr[i] >= 0xf0 && arr[i] <= 0xf7) {\r\n      // 四字节\r\n      str.push(String.fromCodePoint(((arr[i] & 0x07) << 18) + ((arr[i + 1] & 0x3f) << 12) + ((arr[i + 2] & 0x3f) << 6) + (arr[i + 3] & 0x3f)))\r\n      i += 3\r\n    } else if (arr[i] >= 0xe0 && arr[i] <= 0xef) {\r\n      // 三字节\r\n      str.push(String.fromCodePoint(((arr[i] & 0x0f) << 12) + ((arr[i + 1] & 0x3f) << 6) + (arr[i + 2] & 0x3f)))\r\n      i += 2\r\n    } else if (arr[i] >= 0xc0 && arr[i] <= 0xdf) {\r\n      // 双字节\r\n      str.push(String.fromCodePoint(((arr[i] & 0x1f) << 6) + (arr[i + 1] & 0x3f)))\r\n      i++\r\n    } else {\r\n      // 单字节\r\n      str.push(String.fromCodePoint(arr[i]))\r\n    }\r\n  }\r\n\r\n  return str.join('')\r\n}\r\n\r\n/**\r\n * 32 比特循环左移\r\n */\r\nfunction rotl(x, y) {\r\n  return x << y | x >>> (32 - y)\r\n}\r\n\r\n/**\r\n * 非线性变换\r\n */\r\nfunction byteSub(a) {\r\n  return (Sbox[a >>> 24 & 0xFF] & 0xFF) << 24 |\r\n    (Sbox[a >>> 16 & 0xFF] & 0xFF) << 16 |\r\n    (Sbox[a >>> 8 & 0xFF] & 0xFF) << 8 |\r\n    (Sbox[a & 0xFF] & 0xFF)\r\n}\r\n\r\n/**\r\n * 线性变换，加密/解密用\r\n */\r\nfunction l1(b) {\r\n  return b ^ rotl(b, 2) ^ rotl(b, 10) ^ rotl(b, 18) ^ rotl(b, 24)\r\n}\r\n\r\n/**\r\n * 线性变换，生成轮密钥用\r\n */\r\nfunction l2(b) {\r\n  return b ^ rotl(b, 13) ^ rotl(b, 23)\r\n}\r\n\r\n/**\r\n * 以一组 128 比特进行加密/解密操作\r\n */\r\nfunction sms4Crypt(input, output, roundKey) {\r\n  const x = new Array(4)\r\n\r\n  // 字节数组转成字数组（此处 1 字 = 32 比特）\r\n  const tmp = new Array(4)\r\n  for (let i = 0; i < 4; i++) {\r\n    tmp[0] = input[4 * i] & 0xff\r\n    tmp[1] = input[4 * i + 1] & 0xff\r\n    tmp[2] = input[4 * i + 2] & 0xff\r\n    tmp[3] = input[4 * i + 3] & 0xff\r\n    x[i] = tmp[0] << 24 | tmp[1] << 16 | tmp[2] << 8 | tmp[3]\r\n  }\r\n\r\n  // x[i + 4] = x[i] ^ l1(byteSub(x[i + 1] ^ x[i + 2] ^ x[i + 3] ^ roundKey[i]))\r\n  for (let r = 0, mid; r < 32; r += 4) {\r\n    mid = x[1] ^ x[2] ^ x[3] ^ roundKey[r + 0]\r\n    x[0] ^= l1(byteSub(mid)) // x[4]\r\n\r\n    mid = x[2] ^ x[3] ^ x[0] ^ roundKey[r + 1]\r\n    x[1] ^= l1(byteSub(mid)) // x[5]\r\n\r\n    mid = x[3] ^ x[0] ^ x[1] ^ roundKey[r + 2]\r\n    x[2] ^= l1(byteSub(mid)) // x[6]\r\n\r\n    mid = x[0] ^ x[1] ^ x[2] ^ roundKey[r + 3]\r\n    x[3] ^= l1(byteSub(mid)) // x[7]\r\n  }\r\n\r\n  // 反序变换\r\n  for (let j = 0; j < 16; j += 4) {\r\n    output[j] = x[3 - j / 4] >>> 24 & 0xff\r\n    output[j + 1] = x[3 - j / 4] >>> 16 & 0xff\r\n    output[j + 2] = x[3 - j / 4] >>> 8 & 0xff\r\n    output[j + 3] = x[3 - j / 4] & 0xff\r\n  }\r\n}\r\n\r\n/**\r\n * 密钥扩展算法\r\n */\r\nfunction sms4KeyExt(key, roundKey, cryptFlag) {\r\n  const x = new Array(4)\r\n\r\n  // 字节数组转成字数组（此处 1 字 = 32 比特）\r\n  const tmp = new Array(4)\r\n  for (let i = 0; i < 4; i++) {\r\n    tmp[0] = key[0 + 4 * i] & 0xff\r\n    tmp[1] = key[1 + 4 * i] & 0xff\r\n    tmp[2] = key[2 + 4 * i] & 0xff\r\n    tmp[3] = key[3 + 4 * i] & 0xff\r\n    x[i] = tmp[0] << 24 | tmp[1] << 16 | tmp[2] << 8 | tmp[3]\r\n  }\r\n\r\n  // 与系统参数做异或\r\n  x[0] ^= 0xa3b1bac6\r\n  x[1] ^= 0x56aa3350\r\n  x[2] ^= 0x677d9197\r\n  x[3] ^= 0xb27022dc\r\n\r\n  // roundKey[i] = x[i + 4] = x[i] ^ l2(byteSub(x[i + 1] ^ x[i + 2] ^ x[i + 3] ^ CK[i]))\r\n  for (let r = 0, mid; r < 32; r += 4) {\r\n    mid = x[1] ^ x[2] ^ x[3] ^ CK[r + 0]\r\n    roundKey[r + 0] = x[0] ^= l2(byteSub(mid)) // x[4]\r\n\r\n    mid = x[2] ^ x[3] ^ x[0] ^ CK[r + 1]\r\n    roundKey[r + 1] = x[1] ^= l2(byteSub(mid)) // x[5]\r\n\r\n    mid = x[3] ^ x[0] ^ x[1] ^ CK[r + 2]\r\n    roundKey[r + 2] = x[2] ^= l2(byteSub(mid)) // x[6]\r\n\r\n    mid = x[0] ^ x[1] ^ x[2] ^ CK[r + 3]\r\n    roundKey[r + 3] = x[3] ^= l2(byteSub(mid)) // x[7]\r\n  }\r\n\r\n  // 解密时使用反序的轮密钥\r\n  if (cryptFlag === DECRYPT) {\r\n    for (let r = 0, mid; r < 16; r++) {\r\n      mid = roundKey[r]\r\n      roundKey[r] = roundKey[31 - r]\r\n      roundKey[31 - r] = mid\r\n    }\r\n  }\r\n}\r\n\r\nfunction sm4(inArray, key, cryptFlag, {\r\n  padding = 'pkcs#7', mode, iv = [], output = 'string'\r\n} = {}) {\r\n  if (mode === 'cbc') {\r\n    // CBC 模式，默认走 ECB 模式\r\n    if (typeof iv === 'string') iv = hexToArray(iv)\r\n    if (iv.length !== (128 / 8)) {\r\n      // iv 不是 128 比特\r\n      throw new Error('iv is invalid')\r\n    }\r\n  }\r\n\r\n  // 检查 key\r\n  if (typeof key === 'string') key = hexToArray(key)\r\n  if (key.length !== (128 / 8)) {\r\n    // key 不是 128 比特\r\n    throw new Error('key is invalid')\r\n  }\r\n\r\n  // 检查输入\r\n  if (typeof inArray === 'string') {\r\n    if (cryptFlag !== DECRYPT) {\r\n      // 加密，输入为 utf8 串\r\n      inArray = utf8ToArray(inArray)\r\n    } else {\r\n      // 解密，输入为 16 进制串\r\n      inArray = hexToArray(inArray)\r\n    }\r\n  } else {\r\n    inArray = [...inArray]\r\n  }\r\n\r\n  // 新增填充，sm4 是 16 个字节一个分组，所以统一走到 pkcs#7\r\n  if ((padding === 'pkcs#5' || padding === 'pkcs#7') && cryptFlag !== DECRYPT) {\r\n    const paddingCount = BLOCK - inArray.length % BLOCK\r\n    for (let i = 0; i < paddingCount; i++) inArray.push(paddingCount)\r\n  }\r\n\r\n  // 生成轮密钥\r\n  const roundKey = new Array(ROUND)\r\n  sms4KeyExt(key, roundKey, cryptFlag)\r\n\r\n  const outArray = []\r\n  let lastVector = iv\r\n  let restLen = inArray.length\r\n  let point = 0\r\n  while (restLen >= BLOCK) {\r\n    const input = inArray.slice(point, point + 16)\r\n    const output = new Array(16)\r\n\r\n    if (mode === 'cbc') {\r\n      for (let i = 0; i < BLOCK; i++) {\r\n        if (cryptFlag !== DECRYPT) {\r\n          // 加密过程在组加密前进行异或\r\n          input[i] ^= lastVector[i]\r\n        }\r\n      }\r\n    }\r\n\r\n    sms4Crypt(input, output, roundKey)\r\n\r\n\r\n    for (let i = 0; i < BLOCK; i++) {\r\n      if (mode === 'cbc') {\r\n        if (cryptFlag === DECRYPT) {\r\n          // 解密过程在组解密后进行异或\r\n          output[i] ^= lastVector[i]\r\n        }\r\n      }\r\n\r\n      outArray[point + i] = output[i]\r\n    }\r\n\r\n    if (mode === 'cbc') {\r\n      if (cryptFlag !== DECRYPT) {\r\n        // 使用上一次输出作为加密向量\r\n        lastVector = output\r\n      } else {\r\n        // 使用上一次输入作为解密向量\r\n        lastVector = input\r\n      }\r\n    }\r\n\r\n    restLen -= BLOCK\r\n    point += BLOCK\r\n  }\r\n\r\n  // 去除填充，sm4 是 16 个字节一个分组，所以统一走到 pkcs#7\r\n  if ((padding === 'pkcs#5' || padding === 'pkcs#7') && cryptFlag === DECRYPT) {\r\n    const paddingCount = outArray[outArray.length - 1]\r\n    outArray.splice(outArray.length - paddingCount, paddingCount)\r\n  }\r\n\r\n  // 调整输出\r\n  if (output !== 'array') {\r\n    if (cryptFlag !== DECRYPT) {\r\n      // 加密，输出转 16 进制串\r\n      return ArrayToHex(outArray)\r\n    } else {\r\n      // 解密，输出转 utf8 串\r\n      return arrayToUtf8(outArray)\r\n    }\r\n  } else {\r\n    return outArray\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  encrypt(inArray, key, options) {\r\n    return sm4(inArray, key, 1, options)\r\n  },\r\n  decrypt(inArray, key, options) {\r\n    return sm4(inArray, key, 0, options)\r\n  }\r\n}\r\n","module.exports = {\n  sm2: require('./sm2/index'),\n  sm3: require('./sm3/index'),\n  sm4: require('./sm4/index'),\n}\n","import CryptoJS from 'crypto-js';\r\nimport NodeRSA from 'node-rsa';\r\n\r\nclass AES {\r\n    private static instance = new AES();\r\n\r\n    private constructor() {}\r\n\r\n    public static getInstance(): AES {\r\n        return this.instance;\r\n    }\r\n\r\n    private default_key = 'abcd12345sxyzhkj';\r\n\r\n    //加密\r\n    public encrypt(content: unknown, key: string): string {\r\n        key = key ? key : this.default_key;\r\n        const _key = CryptoJS.enc.Utf8.parse(key);\r\n        const _srcs = CryptoJS.enc.Utf8.parse(content);\r\n        const encrypted = CryptoJS.AES.encrypt(_srcs, _key, { mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.Pkcs7 });\r\n        return encrypted.toString();\r\n    }\r\n\r\n    //解密\r\n    public decrypt(content: unknown, key: string): string {\r\n        key = key ? key : this.default_key;\r\n        const _key = CryptoJS.enc.Utf8.parse(key);\r\n        const decrypt = CryptoJS.AES.decrypt(content, _key, { mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.Pkcs7 });\r\n        return CryptoJS.enc.Utf8.stringify(decrypt).toString();\r\n    }\r\n}\r\n\r\nexport const _aes: AES = AES.getInstance();\r\n\r\nclass RSA {\r\n    private static instance = new RSA();\r\n\r\n    private constructor() {}\r\n\r\n    public static getInstance(): RSA {\r\n        return this.instance;\r\n    }\r\n\r\n    public create(): RSAPair {\r\n        const key = new NodeRSA({ b: 512 });\r\n        key.setOptions({ encryptionScheme: 'pkcs1' });\r\n        return { publicKey: key.exportKey('pkcs8-public'), privateKey: key.exportKey('pkcs8-private') };\r\n    }\r\n\r\n    public encrypt(content: any, publicKey: string): string {\r\n        const key = new NodeRSA(publicKey, 'pkcs8-public', { encryptionScheme: 'pkcs1' });\r\n        if (content instanceof Object || content instanceof Array) {\r\n            return key.encrypt(JSON.stringify(content), 'base64', 'utf8');\r\n        } else {\r\n            return key.encrypt(new String(content), 'base64', 'utf8');\r\n        }\r\n    }\r\n\r\n    public decrypt(content: string, privateKey: string): any {\r\n        const key = new NodeRSA(privateKey, 'pkcs8-private', { encryptionScheme: 'pkcs1' });\r\n        return key.decrypt(content, 'utf8');\r\n    }\r\n}\r\n\r\nexport const _rsa: RSA = RSA.getInstance();\r\n\r\nimport { sm2, sm4 } from 'sm-crypto';\r\n\r\nclass SM2Utilities {\r\n    private static instance = new SM2Utilities();\r\n    private cipherMode = 1; // 1 - C1C3C2，0 - C1C2C3\r\n\r\n    private constructor() {}\r\n\r\n    public static getInstance(): SM2Utilities {\r\n        return this.instance;\r\n    }\r\n\r\n    public createKeyPair() {\r\n        return sm2.generateKeyPairHex();\r\n    }\r\n\r\n    public encrypt(content: string, publicKey: string) {\r\n        return '04' + sm2.doEncrypt(content, publicKey, 1);\r\n    }\r\n\r\n    public decrypt(content: string, privateKey: string) {\r\n        const data = content.substring(2).toLocaleLowerCase();\r\n        return sm2.doDecrypt(data, privateKey, 1);\r\n    }\r\n}\r\n\r\nclass SM4Utilities {\r\n    private static instance = new SM4Utilities();\r\n\r\n    private constructor() {}\r\n\r\n    public static getInstance(): SM4Utilities {\r\n        return this.instance;\r\n    }\r\n\r\n    public encrypt(content: string, publicKey: string) {\r\n        return sm4.encrypt(content, publicKey);\r\n    }\r\n\r\n    public decrypt(content: string, privateKey: string) {\r\n        return sm4.decrypt(content, privateKey);\r\n    }\r\n}\r\n\r\nexport const SM2Utils = SM2Utilities.getInstance();\r\nexport const SM4Utils = SM4Utilities.getInstance();\r\n","import * as lodash from 'lodash';\r\nimport * as shortid from 'shortid';\r\nimport { Base64 } from 'js-base64';\r\nimport moment from 'moment';\r\nimport { _localForage, _localStorage } from './database';\r\nimport { _array } from './array';\r\nimport { _notify, Swal, SweetAlertIcon, SweetAlertResult } from './message';\r\nimport { _rsa, _aes, SM2Utils, SM4Utils } from './crypto';\r\n\r\nmoment.locale('zh-cn');\r\n\r\nexport {\r\n    _localForage,\r\n    _localStorage,\r\n    _notify,\r\n    _array,\r\n    Swal,\r\n    SweetAlertIcon,\r\n    SweetAlertResult,\r\n    lodash,\r\n    shortid,\r\n    moment,\r\n    _rsa,\r\n    _aes,\r\n    Base64,\r\n    SM2Utils,\r\n    SM4Utils,\r\n};\r\n"],"names":["LocalForage","getInstance","getItem","key","localforage","removeItem","clear","length","keyIndex","keys","iterate","iteratee","setDriver","driver","config","options","createInstance","instance","_localForage","LocalStorage","this","setItem","JSON","stringify","value","getObject","result","parse","localStorage","isExist","_localStorage","ArrayUtils","prototype","find","array","element","comparator","remove","_array","Notify","position","title","icon","timer","showConfirmButton","info","text","error","warning","success","question","_notify","BigInteger","inBrowser","navigator","i","x","w","j","c","n","xl","xh","v","BI_RC","Array","charAt","intAt","s","t","op_and","y","op_or","op_xor","op_andnot","Classic","_reduceInstanceProperty","call","r","Montgomery","m","u0","mpl","mph","um","DM","DV","b","k","clamp","ds","a","Math","min","abs","ZERO","subTo","am","pm","pt","ms","nsh","DB","nbits","ys","d1","FV","yt","e","F2","qd","y0","floor","d2","ts","q","rShiftTo","z","g","convert","revert","negate","toString","d","p","NullExp","Barrett","lowprimes","lplim","signum","nbv","cs","bitwiseTo","ONE","shiftLeft","f","op","n1","getLowestSetBit","bitLength","isEven","k1","km","sqrTo","r2","ac","u","clone","compareTo","subtract","add","millerRabin","window","crypto","getRandomValues","appName","appVersion","rng_pool","S","SecureRandom","ba","Arcfour","commonjsHelpers.commonjsGlobal","require$$9","exports","getEncodedHex","getValue","l","getLength","tlv","nHex","DERInteger","bigint","_this","_ASN1Object","h","match","len","mask","DERSequence","asn1Array","_this2","_ASN1Object2","_context","_mapInstanceProperty","asn1Object","join","getLenOfL","str","start","substr","getL","getStartOfV","module","encodeDer","derR","derS","input","vIndexR","lR","nextStart","vR","vIndexS","lS","require$$1","THREE","other","equals","toBigInteger","ECFieldElementFp","mod","square","ECPointFp","curve","zinv","getX","modInverse","getY","multiply","isInfinity","x1","y1","x2","y2","z2","w3","w1","w2","w6","w4","w5","twice","infinity","w7","y3","w9","w11","w10","z1","k3","neg","Q","k3Bit","testBit","ECCurveFp","fromBigInteger","xHex","yHex","_require","require$$6","require$$7","rng","_generateEcparam","generateEcparam","G","leftPad","num","getGlobalCurve","generateKeyPairHex","privateKey","publicKey","P","utf8ToHex","bite","words","_i","hexChars","arrayToHex","arr","item","arrayToUtf8","_i2","Error","hexToArray","hexStr","hexStrLength","verifyPublicKey","point","decodePointHex","rotl","xor","and","or","sum","temp","P0","X","FF","Y","Z","GG","not","CF","V","Bi","M","W","SS1","SS2","TT1","TT2","T2","H","_sliceInstanceProperty","T","_j2","T1","D","C","B","A","F","E","_context2","_len","kArr","lenArr","_concatInstanceProperty","_start","require$$5","decodeDer","_","sm3","require$$8","_$generateEcparam","getHash","hashHex","userId","gx","toRadix","gy","data","px","py","entl","getPoint","keypair","doEncrypt","msg","cipherMode","c1","c3","nextT","_context3","offset","c2","doDecrypt","encryptData","_temp","_context4","_context6","_ref$output","output","_context5","toLowerCase","doSignature","_temp2","_ref2","hash","PA","pointPool","doVerifySignature","signHex","_temp3","_ref3","der","decodeDerObj","x1y1","R","BLOCK","Sbox","CK","byteSub","l1","l2","sms4Crypt","roundKey","tmp","mid","sm4","inArray","cryptFlag","_ref","_ref$padding","padding","_ref$iv","iv","_mid","_r","sms4KeyExt","restLen","_output","lastVector","_spliceInstanceProperty","outArray","_paddingCount","sm2","encrypt","decrypt","AES","default_key","const","_key","CryptoJS","enc","Utf8","_srcs","content","mode","ECB","pad","Pkcs7","_aes","RSA","exportKey","NodeRSA","encryptionScheme","Object","String","_rsa","SM2Utilities","SM4Utilities","SM2Utils","SM4Utils","moment","locale"],"mappings":"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,IAAA,IAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,GAAA,IAAA,IAAA,GAAA,IAAA,IAAA,EAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,GAAA,IAAA,GAAA,EAAA,IAAA,IAAA,IAAA,IAAA,GAAA,IAAA,IAAA,GAAA,GAAA,GAAA,IAAA,IAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,GAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,GAAA,GAAA,IAAA,GAAA,EAAA,GAAA,IAAA,IAAA,IAAA,EAAA,GAAA,GAAA,IAAA,IAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,GAAA,IAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,GAAA,GAAA,IAAA,IAAA,IAAA,GAAA,IAAA,IAAA,GAAA,GAAA,GAAA,IAAA,IAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,GAAA,IAAA,IAAA,GAAA,IAAA,IAAA,IAAA,GAAA,IAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,GAAA,GAAA,IAAA,IAAA,IAAA,GAAA,EAAA,IAAA,IAAA,IAAA,IAAA,IAAA,GAAA,GAAA,IAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,IAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,GAAA,IAAA,IAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,EAAA,IAAA,IAAA,IAAA,IAAA,GAAA,IAAA,IAAA,IAAA,GAAA,IAAA,GAAA,GAAA,IAAA,IAAA,GAAA,GAAA,IAAA,IAAA,GAAA,IAmBAC,GAAA,CAAA,OAAA,UAAA,UAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,UAAA,UAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,UA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"}