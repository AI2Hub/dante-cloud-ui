{"version":3,"file":"index.min.js","sources":["../../src/lib/database.ts","../../src/lib/array.ts","../../src/lib/message.ts","../../src/lib/crypto.ts","../../src/lib/index.ts"],"sourcesContent":["import { default as localforage } from 'localforage';\r\n\r\n/**\r\n * 这里使用单例模式，主要是因为将静态类，赋值给Vue.prototype会出现 Property '' is a static member of type '' 错误。\r\n * 参考以下文章\r\n * {@see https://techformist.com/static-variables-methods-typescript/}\r\n * {@see https://www.xspdf.com/resolution/54250655.html}\r\n * {@see https://www.typescriptlang.org/docs/handbook/classes.html#static-properties}\r\n *\r\n * 单例模式饿汉式与懒汉式\r\n * {@see https://zhuanlan.zhihu.com/p/129264092}\r\n */\r\nclass LocalForage {\r\n    private static instance = new LocalForage();\r\n\r\n    private constructor() {}\r\n\r\n    public static getInstance(): LocalForage {\r\n        return this.instance;\r\n    }\r\n\r\n    /**\r\n     * 参考https://github.com/localForage/localForage/blob/master/typings/localforage.d.ts\r\n     *\r\n     * @param key\r\n     */\r\n    public getItem<T>(key: string): Promise<T | null> {\r\n        return localforage.getItem<T>(key);\r\n    }\r\n\r\n    public setItem<T>(key: string, value: T): Promise<T> {\r\n        return localforage.setItem<T>(key, value);\r\n    }\r\n\r\n    public removeItem(key: string): Promise<void> {\r\n        return localforage.removeItem(key);\r\n    }\r\n\r\n    public clear(): Promise<void> {\r\n        return localforage.clear();\r\n    }\r\n\r\n    public length(): Promise<number> {\r\n        return localforage.length();\r\n    }\r\n\r\n    public key(keyIndex: number): Promise<string> {\r\n        return localforage.key(keyIndex);\r\n    }\r\n\r\n    public keys(): Promise<string[]> {\r\n        return localforage.keys();\r\n    }\r\n    public iterate<T, U>(iteratee: (value: T, key: string, iterationNumber: number) => U): Promise<U> {\r\n        return localforage.iterate<T, U>(iteratee);\r\n    }\r\n\r\n    public setDriver(driver: string | string[]): Promise<void> {\r\n        return localforage.setDriver(driver);\r\n    }\r\n\r\n    public config(options: LocalForageOptions): boolean {\r\n        return localforage.config(options);\r\n    }\r\n\r\n    public createInstance(options: LocalForageOptions): LocalForage {\r\n        return localforage.createInstance(options);\r\n    }\r\n}\r\n\r\nexport const _localForage: LocalForage = LocalForage.getInstance();\r\n\r\nclass LocalStorage {\r\n    private static instance = new LocalStorage();\r\n\r\n    private constructor() {}\r\n\r\n    public static getInstance(): LocalStorage {\r\n        return this.instance;\r\n    }\r\n\r\n    public setObject<T>(key: string, value: T): void {\r\n        this.setItem(key, JSON.stringify(value));\r\n    }\r\n\r\n    public getObject<T>(key: string): T | null {\r\n        const result = this.getItem(key);\r\n        if (result) {\r\n            return <T>JSON.parse(result);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public setItem(key: string, value: string): void {\r\n        localStorage.setItem(key, value);\r\n    }\r\n    public getItem(key: string): string | null {\r\n        return localStorage.getItem(key);\r\n    }\r\n\r\n    public removeItem(key: string): void {\r\n        localStorage.removeItem(key);\r\n    }\r\n\r\n    public clear(): void {\r\n        localStorage.clear();\r\n    }\r\n\r\n    public isExist(key: string): boolean {\r\n        if (key && key in localStorage) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport const _localStorage: LocalStorage = LocalStorage.getInstance();\r\n","import * as lodash from 'lodash';\r\n\r\nclass ArrayUtils {\r\n    private static instance = new ArrayUtils();\r\n\r\n    private constructor() {}\r\n\r\n    public static getInstance(): ArrayUtils {\r\n        return this.instance;\r\n    }\r\n\r\n    public find<T>(array: T[], element: T, comparator): T | undefined {\r\n        return lodash.find(array, (item) => item[comparator] === element[comparator]);\r\n    }\r\n\r\n    public remove<T>(array: T[], element: T, comparator): T[] {\r\n        return lodash.remove<T>(array, (item) => item[comparator] === element[comparator]);\r\n    }\r\n}\r\n\r\nexport const _array: ArrayUtils = ArrayUtils.getInstance();\r\n","import Swal, { SweetAlertIcon, SweetAlertResult } from 'sweetalert2';\r\n\r\n/**\r\n * 这里使用单例模式，主要是因为将静态类，赋值给Vue.prototype会出现 Property '' is a static member of type '' 错误。\r\n * 参考以下文章\r\n * {@see https://techformist.com/static-variables-methods-typescript/}\r\n * {@see https://www.xspdf.com/resolution/54250655.html}\r\n * {@see https://www.typescriptlang.org/docs/handbook/classes.html#static-properties}\r\n *\r\n * 单例模式饿汉式与懒汉式\r\n * {@see https://zhuanlan.zhihu.com/p/129264092}\r\n */\r\nclass Notify {\r\n    private static instance = new Notify();\r\n\r\n    private constructor() {}\r\n\r\n    public static getInstance(): Notify {\r\n        return this.instance;\r\n    }\r\n\r\n    public information(title: string, icon: SweetAlertIcon): Promise<SweetAlertResult<string>> {\r\n        return Swal.fire({\r\n            position: 'top',\r\n            title: title,\r\n            icon: icon,\r\n            timer: 2000,\r\n            showConfirmButton: false,\r\n        });\r\n    }\r\n\r\n    public info(text: string): Promise<SweetAlertResult<string>> {\r\n        return this.information(text, 'info');\r\n    }\r\n\r\n    public error(text: string): Promise<SweetAlertResult<string>> {\r\n        return this.information(text, 'error');\r\n    }\r\n\r\n    public warning(text: string): Promise<SweetAlertResult<string>> {\r\n        return this.information(text, 'warning');\r\n    }\r\n\r\n    public success(text: string): Promise<SweetAlertResult<string>> {\r\n        return this.information(text, 'success');\r\n    }\r\n\r\n    public question(text: string): Promise<SweetAlertResult<string>> {\r\n        return this.information(text, 'question');\r\n    }\r\n}\r\n\r\nexport const _notify: Notify = Notify.getInstance();\r\n\r\nexport { Swal, SweetAlertIcon, SweetAlertResult };\r\n","import CryptoJS from 'crypto-js';\r\nimport NodeRSA from 'node-rsa';\r\n\r\nclass AES {\r\n    private static instance = new AES();\r\n\r\n    private constructor() {}\r\n\r\n    public static getInstance(): AES {\r\n        return this.instance;\r\n    }\r\n\r\n    private default_key = 'abcd12345sxyzhkj';\r\n\r\n    //加密\r\n    public encrypt(key: string, content: unknown): string {\r\n        key = key ? key : this.default_key;\r\n        const _key = CryptoJS.enc.Utf8.parse(key);\r\n        const _srcs = CryptoJS.enc.Utf8.parse(content);\r\n        const encrypted = CryptoJS.AES.encrypt(_srcs, _key, { mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.Pkcs7 });\r\n        return encrypted.toString();\r\n    }\r\n\r\n    //解密\r\n    public decrypt(key: string, content: unknown): string {\r\n        key = key ? key : this.default_key;\r\n        const _key = CryptoJS.enc.Utf8.parse(key);\r\n        const decrypt = CryptoJS.AES.decrypt(content, _key, { mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.Pkcs7 });\r\n        return CryptoJS.enc.Utf8.stringify(decrypt).toString();\r\n    }\r\n}\r\n\r\nexport const _aes: AES = AES.getInstance();\r\n\r\nclass RSA {\r\n    private static instance = new RSA();\r\n\r\n    private constructor() {}\r\n\r\n    public static getInstance(): RSA {\r\n        return this.instance;\r\n    }\r\n\r\n    public create(): RSAPair {\r\n        const key = new NodeRSA({ b: 512 });\r\n        key.setOptions({ encryptionScheme: 'pkcs1' });\r\n        return { publicKey: key.exportKey('pkcs8-public'), privateKey: key.exportKey('pkcs8-private') };\r\n    }\r\n\r\n    public encrypt(publicKey: string, content: any): string {\r\n        const key = new NodeRSA(publicKey, 'pkcs8-public', { encryptionScheme: 'pkcs1' });\r\n        if (content instanceof Object || content instanceof Array) {\r\n            return key.encrypt(JSON.stringify(content), 'base64', 'utf8');\r\n        } else {\r\n            return key.encrypt(new String(content), 'base64', 'utf8');\r\n        }\r\n    }\r\n\r\n    public decrypt(privateKey: string, content: string): any {\r\n        const key = new NodeRSA(privateKey, 'pkcs8-private', { encryptionScheme: 'pkcs1' });\r\n        return key.decrypt(content, 'utf8');\r\n    }\r\n}\r\n\r\nexport const _rsa: RSA = RSA.getInstance();\r\n","import * as lodash from 'lodash';\r\nimport * as shortid from 'shortid';\r\nimport { Base64 } from 'js-base64';\r\nimport moment from 'moment';\r\nimport { _localForage, _localStorage } from './database';\r\nimport { _array } from './array';\r\nimport { _notify, Swal, SweetAlertIcon, SweetAlertResult } from './message';\r\nimport { _rsa, _aes } from './crypto';\r\n\r\nmoment.locale('zh-cn');\r\n\r\nexport {\r\n    _localForage,\r\n    _localStorage,\r\n    _notify,\r\n    _array,\r\n    Swal,\r\n    SweetAlertIcon,\r\n    SweetAlertResult,\r\n    lodash,\r\n    shortid,\r\n    moment,\r\n    _rsa,\r\n    _aes,\r\n    Base64,\r\n};\r\n"],"names":["LocalForage","getInstance","getItem","key","localforage","removeItem","clear","length","keyIndex","keys","iterate","iteratee","setDriver","driver","config","options","createInstance","instance","_localForage","LocalStorage","this","setItem","JSON","stringify","value","getObject","result","parse","localStorage","isExist","_localStorage","ArrayUtils","prototype","find","array","element","comparator","remove","_array","Notify","position","title","icon","timer","showConfirmButton","info","text","error","warning","success","question","_notify","AES","default_key","const","_key","CryptoJS","enc","Utf8","_srcs","content","encrypt","mode","ECB","padding","pad","Pkcs7","toString","decrypt","_aes","RSA","publicKey","exportKey","privateKey","NodeRSA","encryptionScheme","Object","Array","String","_rsa","moment","locale"],"mappings":"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"}