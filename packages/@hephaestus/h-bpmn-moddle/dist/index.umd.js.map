{"version":3,"file":"index.umd.js","sources":["../src/plugins/translate/zh.ts","../src/plugins/translate/custom.ts","../src/components/property/layouts/HExpansionPanel.vue","../src/components/property/panel/HPanelTooltip.vue","../src/components/property/panel/HPanelTextField.vue","../src/components/property/HPropertyPanel.vue","../src/HBpmnModdle.vue","../src/index.ts"],"sourcesContent":["/**\n * This is a sample file that should be replaced with the actual translation.\n *\n * Checkout https://github.com/bpmn-io/bpmn-js-i18n for a list of available\n * translations and labels to translate.\n */\nexport default {\n    'Activate the create/remove space tool': '启动创建/删除空间工具',\n    'Activate the global connect tool': '启动全局连接工具',\n    'Activate the hand tool': '启动手动工具',\n    'Activate the lasso tool': '启动 Lasso 工具',\n    'Ad-hoc': 'Ad-hoc子流程',\n    'Add Lane above': '添加到通道之上',\n    'Add Lane below': '添加到通道之下',\n    'Append compensation activity': '追加补偿活动',\n    'Append {type}': '追加 {type}',\n    'Business Rule Task': '规则任务',\n    'Call Activity': '引用流程',\n    'Cancel Boundary Event': '取消边界事件',\n    'Cancel End Event': '结束取消事件',\n    'Change type': '更改类型',\n    'Collapsed Pool': '折叠池',\n    'Compensation Boundary Event': '补偿边界事件',\n    'Compensation End Event': '结束补偿事件',\n    'Compensation Intermediate Throw Event': '中间补偿抛出事件',\n    'Compensation Start Event': '补偿启动事件',\n    'Complex Gateway': '复杂网关',\n    'Conditional Boundary Event (non-interrupting)': '条件边界事件 (非中断)',\n    'Conditional Boundary Event': '条件边界事件',\n    'Conditional Intermediate Catch Event': '中间条件捕获事件',\n    'Conditional Start Event (non-interrupting)': '条件启动事件 (非中断)',\n    'Conditional Start Event': '条件启动事件',\n    'Connect using Association': '文本关联',\n    'Connect using DataInputAssociation': '数据关联',\n    'Connect using Sequence/MessageFlow or Association': '消息关联',\n    'Create IntermediateThrowEvent/BoundaryEvent': '创建中间抛出/边界事件',\n    'Create Pool/Participant': '创建池/参与者',\n    'Create expanded SubProcess': '创建可折叠子流程',\n    'Create {type}': '创建 {type}',\n    'Divide into three Lanes': '分成三条通道',\n    'Divide into two Lanes': '分成两条通道',\n    'End Event': '结束事件',\n    'Error Boundary Event': '错误边界事件',\n    'Error End Event': '结束错误事件',\n    'Error Start Event': '错误启动事件',\n    'Escalation Boundary Event (non-interrupting)': '升级边界事件 (非中断)',\n    'Escalation Boundary Event': '升级边界事件',\n    'Escalation End Event': '结束升级事件',\n    'Escalation Intermediate Throw Event': '中间升级抛出事件',\n    'Escalation Start Event (non-interrupting)': '升级启动事件 (非中断)',\n    'Escalation Start Event': '升级启动事件',\n    'Event Sub Process': '事件子流程',\n    'Event based Gateway': '事件网关',\n    'Exclusive Gateway': '独占网关',\n    'Expanded Pool': '展开池',\n    'Inclusive Gateway': '包容网关',\n    'Intermediate Throw Event': '中间抛出事件',\n    'Link Intermediate Catch Event': '中间链接捕获事件',\n    'Link Intermediate Throw Event': '中间链接抛出事件',\n    Loop: '循环',\n    'Manual Task': '手动任务',\n    'Message Boundary Event (non-interrupting)': '消息边界事件 (非中断)',\n    'Message Boundary Event': '消息边界事件',\n    'Message End Event': '结束消息事件',\n    'Message Intermediate Catch Event': '中间消息捕获事件',\n    'Message Intermediate Throw Event': '中间消息抛出事件',\n    'Message Start Event (non-interrupting)': '消息启动事件 (非中断)',\n    'Message Start Event': '消息启动事件',\n    'Parallel Gateway': '并行网关',\n    'Parallel Multi Instance': '并行多实例',\n    'Receive Task': '接受任务',\n    Remove: '移除',\n    'Script Task': '脚本任务',\n    'Send Task': '发送任务',\n    'Sequential Multi Instance': '串行多实例',\n    'Service Task': '服务任务',\n    'Signal Boundary Event (non-interrupting)': '信号边界事件 (非中断)',\n    'Signal Boundary Event': '信号边界事件',\n    'Signal End Event': '结束信号事件',\n    'Signal Intermediate Catch Event': '中间信号捕获事件',\n    'Signal Intermediate Throw Event': '中间信号抛出事件',\n    'Signal Start Event (non-interrupting)': '信号启动事件 (非中断)',\n    'Signal Start Event': '信号启动事件',\n    'Start Event': '开始事件',\n    'Sub Process (collapsed)': '可折叠子流程',\n    'Sub Process (expanded)': '可展开子流程',\n    'Sub Process': '子流程',\n    Task: '任务',\n    'Terminate End Event': '终止边界事件',\n    'Timer Boundary Event (non-interrupting)': '定时边界事件 (非中断)',\n    'Timer Boundary Event': '定时边界事件',\n    'Timer Intermediate Catch Event': '中间定时捕获事件',\n    'Timer Start Event (non-interrupting)': '定时启动事件 (非中断)',\n    'Timer Start Event': '定时启动事件',\n    Transaction: '事务',\n    'User Task': '用户任务',\n    'already rendered {element}': '{element} 已呈现',\n    'diagram not part of bpmn:Definitions': '图表不是 bpmn:Definitions 的一部分',\n    'element required': '需要元素',\n    'element {element} referenced by {referenced}#{property} not yet drawn':\n        '元素 {element} 的引用 {referenced}#{property} 尚未绘制',\n    'failed to import {element}': '{element} 导入失败',\n    'flow elements must be children of pools/participants': '元素必须是池/参与者的子级',\n    'more than {count} child lanes': '超过 {count} 条通道',\n    'no diagram to display': '没有要显示的图表',\n    'no parent for {element} in {parent}': '在 {element} 中没有父元素 {parent}',\n    'no process or collaboration to display': '没有可显示的流程或协作',\n    'no shape type specified': '未指定形状类型',\n    'out of bounds release': '越界释放',\n};\n","import TranslationsChinese from './zh';\n\nfunction translater(template: string, replacements: Record<string, string>): string {\n    const _replacements = replacements || {};\n\n    const _template = TranslationsChinese[template] || template;\n\n    return _template.replace(/{([^}]+)}/g, function (_, key) {\n        return _replacements[key] || '{' + key + '}';\n    });\n}\n\nexport default {\n    translate: ['value', translater],\n};\n","<template>\n    <v-expansion-panel :key=\"index\">\n        <v-expansion-panel-header>{{ header }}</v-expansion-panel-header>\n        <v-expansion-panel-content>\n            <v-list class=\"ml-1 mr-1\">\n                <slot></slot>\n            </v-list>\n        </v-expansion-panel-content>\n    </v-expansion-panel>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Prop, Vue } from 'vue-property-decorator';\n\n@Component\nexport default class HExpansionPanel extends Vue {\n    @Prop({ type: String, required: true }) readonly index!: string;\n    @Prop({ type: String, required: true }) readonly header!: string;\n}\n</script>\n\n","<template>\n    <v-list-item-action v-if=\"content\">\n        <v-tooltip left max-width=\"200px\">\n            <template v-slot:activator=\"{ on, attrs }\">\n                <v-icon color=\"grey lighten-1\" dark v-bind=\"attrs\" v-on=\"on\">mdi-information</v-icon>\n            </template>\n            <span>{{ content }}</span>\n        </v-tooltip>\n    </v-list-item-action>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Prop, Vue } from 'vue-property-decorator';\n\n@Component\nexport default class HPanelTooltip extends Vue {\n    @Prop({ type: String, required: true, default: '' }) readonly content!: string;\n}\n</script>\n","<template>\n    <v-list-item dense class=\"pa-0\">\n        <v-list-item-content>\n            <v-text-field\n                v-model=\"inputValue\"\n                :label=\"label\"\n                :disabled=\"disabled\"\n                outlined\n                dense\n                hide-details\n                clearable\n                class=\"ml-1 pr-2\"\n            ></v-text-field>\n        </v-list-item-content>\n        <h-panel-tooltip :content=\"tooltip\"></h-panel-tooltip>\n    </v-list-item>\n</template>\n\n<script lang=\"ts\">\nimport { Component, VModel, Prop, Vue } from 'vue-property-decorator';\nimport HPanelTooltip from './HPanelTooltip.vue';\n\n@Component({\n    components: {\n        HPanelTooltip,\n    },\n})\nexport default class HPanelTextField extends Vue {\n    @VModel({ type: String }) inputValue!: string;\n\n    @Prop({ type: String, default: '' }) readonly label?: string;\n    @Prop({ type: String, default: '' }) readonly tooltip?: string;\n    @Prop({ type: Boolean, default: false }) readonly disabled?: boolean;\n}\n</script>\n","<template>\n    <v-container fluid class=\"pa-0\">\n        <v-row>\n            <v-col>\n                <v-card flat outlined tile>\n                    <v-card-title>\n                        {{ schema.id }}\n                    </v-card-title>\n\n                    <v-divider></v-divider>\n                    <v-card-text class=\"pa-2\">\n                        <v-expansion-panels focusable mandatory class=\"mb-4\">\n                            <h-expansion-panel index=\"general\" header=\"常规\">\n                                <h-panel-text-field\n                                    v-model=\"schema.id\"\n                                    label=\"Id\"\n                                    tooltip=\"这映射到流程定义键\"\n                                ></h-panel-text-field>\n                                <h-panel-text-field v-model=\"schema.name\" label=\"名称\"></h-panel-text-field>\n                            </h-expansion-panel>\n                            <h-expansion-panel index=\"general2\" header=\"常规\">\n                                <h-panel-text-field\n                                    v-model=\"schema.id\"\n                                    label=\"Id\"\n                                ></h-panel-text-field> </h-expansion-panel\n                        ></v-expansion-panels>\n                    </v-card-text>\n                </v-card>\n            </v-col>\n        </v-row>\n    </v-container>\n</template>\n\n\n<script lang=\"ts\">\nimport { Component, Emit, Prop, Vue, Watch } from 'vue-property-decorator';\n\nimport { HExpansionPanel } from './layouts';\nimport { HPanelTextField } from './panel';\n\n@Component({\n    components: {\n        HExpansionPanel,\n        HPanelTextField,\n    },\n})\nexport default class HPropertyPanel extends Vue {\n    // 基础数据\n    @Prop({ type: Object, required: true, default: () => {} }) readonly schema;\n}\n</script>\n\n<style lang=\"scss\">\n</style>\n","<template>\n    <v-container class=\"grey lighten-5 pa-0\">\n        <v-row no-gutters>\n            <v-col cols=\"12\" sm=\"9\" md=\"9\">\n                <v-toolbar dense>\n                    <v-btn-toggle v-model=\"toggle_multiple\" color=\"primary\" dense group multiple>\n                        <v-btn :value=\"1\" text>\n                            <v-icon>mdi-format-bold</v-icon>\n                        </v-btn>\n\n                        <v-btn :value=\"2\" text>\n                            <v-icon>mdi-format-italic</v-icon>\n                        </v-btn>\n\n                        <v-btn :value=\"3\" text>\n                            <v-icon>mdi-format-underline</v-icon>\n                        </v-btn>\n\n                        <v-btn :value=\"4\" text>\n                            <v-icon>mdi-format-color-fill</v-icon>\n                        </v-btn>\n                    </v-btn-toggle>\n\n                    <div class=\"mx-4\"></div>\n\n                    <v-btn-toggle v-model=\"toggle_exclusive\" color=\"primary\" dense group>\n                        <v-btn :value=\"1\" text>\n                            <v-icon>mdi-format-align-left</v-icon>\n                        </v-btn>\n\n                        <v-btn :value=\"2\" text>\n                            <v-icon>mdi-format-align-center</v-icon>\n                        </v-btn>\n\n                        <v-btn :value=\"3\" text>\n                            <v-icon>mdi-format-align-right</v-icon>\n                        </v-btn>\n\n                        <v-btn :value=\"4\" text>\n                            <v-icon>mdi-format-align-justify</v-icon>\n                        </v-btn>\n                    </v-btn-toggle>\n                </v-toolbar>\n                <v-container grid-list-xl fluid>\n                    <v-row>\n                        <v-col cols=\"10\" class=\"pa-0\">\n                            <div class=\"containers\">\n                                <div id=\"canvas\" class=\"canvas\"></div>\n                            </div>\n                        </v-col>\n                        <v-col cols=\"2\" class=\"pa-0\">\n                            <div id=\"properties-panel\" class=\"properties-panel\"></div>\n                        </v-col>\n                    </v-row>\n                </v-container>\n            </v-col>\n            <v-col cols=\"3\" md=\"3\">\n                <h-property-panel :schema=\"businessObject\"></h-property-panel>\n            </v-col>\n        </v-row>\n    </v-container>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Emit, Prop, Vue, Watch } from 'vue-property-decorator';\nimport BpmnModeler from 'bpmn-js/lib/Modeler';\n// 模拟流转流程\nimport TokenSimulation from 'bpmn-js-token-simulation';\nimport {\n    TranslateModule,\n    CamundaModdleDescriptor,\n    ActivitiModdleDescriptor,\n    FlowableModdleDescriptor,\n    ActivitiModdleExtension,\n    CamundaModdleExtension,\n    FlowableModdleExtension,\n} from './plugins';\n\nimport { HPropertyPanel } from './components';\n\nimport PropertiesPanelModule from 'bpmn-js-properties-panel'; // 属性面板\nimport PropertiesProviderModule from 'bpmn-js-properties-panel/lib/provider/camunda';\nimport diagram from './static/data/diagram.xml';\n\n@Component({\n    components: {\n        HPropertyPanel,\n    },\n})\nexport default class HBpmnModdle extends Vue {\n    // 模拟流转\n    @Prop({ type: Boolean, default: true }) readonly simulation?: boolean;\n    // 键盘操作\n    @Prop({ type: Boolean, default: true }) readonly keyboard?: boolean;\n    // 支持类型\n    @Prop({ type: String, default: 'camunda' }) readonly type?: string;\n\n    private bpmnModeler = {} as InstanceType<typeof BpmnModeler>;\n    private element = {};\n    public businessObject = {};\n    public elementType = '';\n\n    // compute\n    get additionalModules() {\n        const Modules = [];\n\n        // 翻译模块\n        Modules.push(TranslateModule);\n\n        // 模拟流转模块\n        if (this.simulation) {\n            Modules.push(TokenSimulation);\n        }\n\n        // 根据需要的流程类型设置扩展元素构建模块\n        // if (this.type === 'camunda') {\n        //     Modules.push(CamundaModdleExtension);\n        // }\n        // if (this.type === 'flowable') {\n        //     Modules.push(FlowableModdleExtension);\n        // }\n        // if (this.type === 'activiti') {\n        //     Modules.push(ActivitiModdleExtension);\n        // }\n\n        // 左边工具栏以及节点\n        Modules.push(PropertiesProviderModule);\n        // 右边的工具栏\n        Modules.push(PropertiesPanelModule);\n\n        return Modules;\n    }\n\n    get moddleExtensions() {\n        const Extensions = {};\n\n        // 根据需要的 \"流程类型\" 设置 对应的解析文件\n        if (this.type === 'activiti') {\n            Extensions['activiti'] = ActivitiModdleDescriptor;\n        }\n        if (this.type === 'flowable') {\n            Extensions['flowable'] = FlowableModdleDescriptor;\n        }\n        if (this.type === 'camunda') {\n            Extensions['camunda'] = CamundaModdleDescriptor;\n        }\n        return Extensions;\n    }\n\n    private createBpmnModeler(): InstanceType<typeof BpmnModeler> {\n        return new BpmnModeler({\n            container: '#canvas',\n            keyboard: {\n                bindTo: document,\n            },\n            // 添加控制板\n            propertiesPanel: {\n                parent: '#properties-panel',\n            },\n            additionalModules: this.additionalModules,\n            moddleExtensions: this.moddleExtensions,\n        });\n    }\n\n    private getCanvas() {\n        return this.bpmnModeler.get('canvas');\n    }\n\n    private getEventBus() {\n        return this.bpmnModeler.get('eventBus');\n    }\n\n    private onBusinessObjectChange(businessObject) {\n        this.businessObject = businessObject;\n    }\n\n    private addEventBusListener(): void {\n        const _that = this;\n        const EventBus = _that.getEventBus();\n        const EventTypes = ['element.click', 'element.changed', 'import.done'];\n\n        EventTypes.forEach((action) => {\n            EventBus.on(action, (event) => {\n                console.log('[HBM] |- Event Type : ', action);\n                console.log('[HBM] |- E : ', event);\n                const name = action.replace(/\\./g, '-');\n                const element = event ? event.element : null;\n                this.element = element;\n                this.onBusinessObjectChange(element.businessObject);\n            });\n        });\n    }\n\n    private addListeners(): void {\n        this.addEventBusListener();\n    }\n\n    /**\n     * 创建新的图形\n     */\n    private async createNewDiagram(diagram: string): Promise<void> {\n        try {\n            let result = await this.bpmnModeler.importXML(diagram);\n            const { warnings } = result;\n\n            this.addListeners();\n\n            console.log('[HBM] |- Create New Diagram Success !', warnings);\n\n            let canvas = this.getCanvas();\n            canvas.zoom('fit-viewport', 'auto');\n\n            this.element = canvas.getRootElement();\n        } catch (err) {\n            const { warnings, message } = err;\n            console.error('[HBM] |- Could not create BPMN 2.0 diagram!', warnings, message);\n        }\n    }\n\n    private init(): void {\n        this.bpmnModeler = this.createBpmnModeler();\n        this.createNewDiagram(this.bpmn);\n    }\n\n    // Vue 生命周期\n    public mounted(): void {\n        this.init();\n    }\n\n    @Watch('element')\n    public onElementChanged(newValue) {\n        if (newValue) {\n            console.log(newValue);\n            console.log(newValue.type);\n            this.elementType = newValue.type.split(':')[1] || '';\n            this.businessObject = newValue.businessObject;\n        }\n    }\n\n    public bpmn = diagram;\n    public icon = 'justify';\n    public toggle_exclusive = 2;\n    public toggle_multiple = [1, 2, 3];\n    public dropdown_font = [{ text: 'Arial' }, { text: 'Calibri' }, { text: 'Courier' }, { text: 'Verdana' }];\n    public dropdown_edit = [{ text: '100%' }, { text: '75%' }, { text: '50%' }, { text: '25%' }, { text: '0%' }];\n\n    public onElementClick(element) {\n        console.log('=============== click ==', element);\n        this.element = element.businessObject;\n    }\n}\n</script>\n\n<style lang=\"scss\">\n/*左边工具栏以及编辑节点的样式*/\n@import '~bpmn-js/dist/assets/diagram-js.css';\n@import '~bpmn-js/dist/assets/bpmn-font/css/bpmn.css';\n@import '~bpmn-js/dist/assets/bpmn-font/css/bpmn-codes.css';\n@import '~bpmn-js/dist/assets/bpmn-font/css/bpmn-embedded.css';\n/*右边工具栏样式*/\n@import '~bpmn-js-properties-panel/dist/assets/bpmn-js-properties-panel.css';\n</style>\n\n","import Vue from 'vue';\n\nimport HBpmnModdle from './HBpmnModdle.vue';\n\nconst HBpmnModdleInstall = {\n    install(vue: typeof Vue): void {\n        vue.component('HBpmnModdle', HBpmnModdle);\n    },\n};\n\nexport default HBpmnModdle;\nexport { HBpmnModdleInstall as HBpmnModdle };\n"],"names":["TranslationsChinese","Activate the create/remove space tool","Activate the global connect tool","Activate the hand tool","Activate the lasso tool","Ad-hoc","Add Lane above","Add Lane below","Append compensation activity","Append {type}","Business Rule Task","Call Activity","Cancel Boundary Event","Cancel End Event","Change type","Collapsed Pool","Compensation Boundary Event","Compensation End Event","Compensation Intermediate Throw Event","Compensation Start Event","Complex Gateway","Conditional Boundary Event (non-interrupting)","Conditional Boundary Event","Conditional Intermediate Catch Event","Conditional Start Event (non-interrupting)","Conditional Start Event","Connect using Association","Connect using DataInputAssociation","Connect using Sequence/MessageFlow or Association","Create IntermediateThrowEvent/BoundaryEvent","Create Pool/Participant","Create expanded SubProcess","Create {type}","Divide into three Lanes","Divide into two Lanes","End Event","Error Boundary Event","Error End Event","Error Start Event","Escalation Boundary Event (non-interrupting)","Escalation Boundary Event","Escalation End Event","Escalation Intermediate Throw Event","Escalation Start Event (non-interrupting)","Escalation Start Event","Event Sub Process","Event based Gateway","Exclusive Gateway","Expanded Pool","Inclusive Gateway","Intermediate Throw Event","Link Intermediate Catch Event","Link Intermediate Throw Event","Loop","Manual Task","Message Boundary Event (non-interrupting)","Message Boundary Event","Message End Event","Message Intermediate Catch Event","Message Intermediate Throw Event","Message Start Event (non-interrupting)","Message Start Event","Parallel Gateway","Parallel Multi Instance","Receive Task","Remove","Script Task","Send Task","Sequential Multi Instance","Service Task","Signal Boundary Event (non-interrupting)","Signal Boundary Event","Signal End Event","Signal Intermediate Catch Event","Signal Intermediate Throw Event","Signal Start Event (non-interrupting)","Signal Start Event","Start Event","Sub Process (collapsed)","Sub Process (expanded)","Sub Process","Task","Terminate End Event","Timer Boundary Event (non-interrupting)","Timer Boundary Event","Timer Intermediate Catch Event","Timer Start Event (non-interrupting)","Timer Start Event","Transaction","User Task","already rendered {element}","diagram not part of bpmn:Definitions","element required","element {element} referenced by {referenced}#{property} not yet drawn","failed to import {element}","flow elements must be children of pools/participants","more than {count} child lanes","no diagram to display","no parent for {element} in {parent}","no process or collaboration to display","no shape type specified","out of bounds release","TranslateModule","translate","template","replacements","const","_replacements","HExpansionPanel","Vue","__decorate","prototype","__vue_script__","HPanelTooltip","Prop","type","String","required","default","HPanelTextField","VModel","Component","components","HPropertyPanel","Object","HBpmnModdle","this","dropdown_edit","text","prototypeAccessors","additionalModules","Modules","push","TokenSimulation","PropertiesProviderModule","PropertiesPanelModule","moddleExtensions","Extensions","ActivitiModdleDescriptor","FlowableModdleDescriptor","CamundaModdleDescriptor","container","keyboard","bindTo","document","propertiesPanel","parent","onBusinessObjectChange","businessObject","EventBus","getEventBus","forEach","action","console","log","event","element","warnings","let","canvas","getCanvas","zoom","getRootElement","err","warnings$1","message","bpmnModeler","createBpmnModeler","createNewDiagram","bpmn","onElementChanged","newValue","elementType","split","onElementClick","HBpmnModdleInstall","install","vue","component"],"mappings":"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"}